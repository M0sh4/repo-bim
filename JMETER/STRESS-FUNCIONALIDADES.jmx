<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="EJECUCIÓN  - FUNCIONALIDADES CORE - CARGA INICIAL">
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables definidas por el Usuario">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - UAT" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="key_encryption" elementType="Argument">
            <stringProp name="Argument.name">key_encryption</stringProp>
            <stringProp name="Argument.value">Qa3vxOUsYpG7zhBFBY6WeUrg3TC5IyQA</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="iv_encryption" elementType="Argument">
            <stringProp name="Argument.name">iv_encryption</stringProp>
            <stringProp name="Argument.value">m2tEOdbMTgZx7QAi</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="x-api-key-operaciones" elementType="Argument">
            <stringProp name="Argument.name">x-api-key-operaciones</stringProp>
            <stringProp name="Argument.value">EoMxtKHj1X9eEOFVbM9RM7CJTrDgVSdN2HCbP4Tb</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="x-api-key-inicio" elementType="Argument">
            <stringProp name="Argument.name">x-api-key-inicio</stringProp>
            <stringProp name="Argument.value">zQ6dNjRvyj2IfgNVsRYca4l2zMPKCOia07pDvl9j</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="x-api-key-bn" elementType="Argument">
            <stringProp name="Argument.name">x-api-key-bn</stringProp>
            <stringProp name="Argument.value">iNqzeeBIen7yIyuIsnjT86jwG17Fyttt6szKp1Sd</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="api-key-external-niubiz" elementType="Argument">
            <stringProp name="Argument.name">api-key-external-niubiz</stringProp>
            <stringProp name="Argument.value">ZfDeQeY9OQ9m5RyDicafy6fSaznCKMz43nhZkQvq</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="x-api-key-cce" elementType="Argument">
            <stringProp name="Argument.name">x-api-key-cce</stringProp>
            <stringProp name="Argument.value">TSMInXTOpG6BPvfe3FAmW6gKZz0q9gB21YL9biP5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="URL_OPERACIONES" elementType="Argument">
            <stringProp name="Argument.name">URL_OPERACIONES</stringProp>
            <stringProp name="Argument.value">mqfndijsjh.execute-api.us-east-1.amazonaws.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="URL_INICIO" elementType="Argument">
            <stringProp name="Argument.name">URL_INICIO</stringProp>
            <stringProp name="Argument.value">1hbv9xqjb4.execute-api.us-east-1.amazonaws.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="URL_BN" elementType="Argument">
            <stringProp name="Argument.name">URL_BN</stringProp>
            <stringProp name="Argument.value">ig8jznkkog.execute-api.us-east-1.amazonaws.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url_token_login_niubiz" elementType="Argument">
            <stringProp name="Argument.name">url_token_login_niubiz</stringProp>
            <stringProp name="Argument.value">l5tp2tmknc.execute-api.us-east-1.amazonaws.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="URL_CCE" elementType="Argument">
            <stringProp name="Argument.name">URL_CCE</stringProp>
            <stringProp name="Argument.value">ql3u4sod1g.execute-api.us-east-1.amazonaws.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH_OPERACIONES" elementType="Argument">
            <stringProp name="Argument.name">PATH_OPERACIONES</stringProp>
            <stringProp name="Argument.value">/qa/b1m/pdp/b3po7</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH_INICIO" elementType="Argument">
            <stringProp name="Argument.name">PATH_INICIO</stringProp>
            <stringProp name="Argument.value">/qa/b1m/4pp/b3p23</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH_BN" elementType="Argument">
            <stringProp name="Argument.name">PATH_BN</stringProp>
            <stringProp name="Argument.value">/qa/pdp/banco-nacion/atm</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH_COMPARTAMOS_ATM" elementType="Argument">
            <stringProp name="Argument.name">PATH_COMPARTAMOS_ATM</stringProp>
            <stringProp name="Argument.value">/qa/fcompartamos_atm</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH_COMPARTAMOS_FULLCARGA" elementType="Argument">
            <stringProp name="Argument.name">PATH_COMPARTAMOS_FULLCARGA</stringProp>
            <stringProp name="Argument.value">/qa/fcompartamos_fullcarga</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Path_login_niubiz" elementType="Argument">
            <stringProp name="Argument.name">Path_login_niubiz</stringProp>
            <stringProp name="Argument.value">/qa/v1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH_CCE" elementType="Argument">
            <stringProp name="Argument.name">PATH_CCE</stringProp>
            <stringProp name="Argument.value">/qa/sixsti/receptor</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AuthorizationCashOutBN" elementType="Argument">
            <stringProp name="Argument.name">AuthorizationCashOutBN</stringProp>
            <stringProp name="Argument.value">Qk5BUFdWSVJUVUFMMTU1OkRldkBVQVQjMjUwMTEy</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AuthorizationCashOutCF" elementType="Argument">
            <stringProp name="Argument.name">AuthorizationCashOutCF</stringProp>
            <stringProp name="Argument.value">QWdlbnRlRkNvbXBhcnRhbW9zOkNvbXYyM0BBRm4=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AuthorizationCashOutUnicard" elementType="Argument">
            <stringProp name="Argument.name">AuthorizationCashOutUnicard</stringProp>
            <stringProp name="Argument.value">QWdlbnRlRkNvbXBhcnRhbW9zOkNvbXYyM0BBRm4=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AuthorizationCashOutYaGanaste" elementType="Argument">
            <stringProp name="Argument.name">AuthorizationCashOutYaGanaste</stringProp>
            <stringProp name="Argument.value">QWdlbnRlRkNvbXBhcnRhbW9zOkNvbXYyM0BBRm4=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="YP_client_id" elementType="Argument">
            <stringProp name="Argument.name">YP_client_id</stringProp>
            <stringProp name="Argument.value">267a651cf985861bef49f5cc534f4014</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="YP_client_secret" elementType="Argument">
            <stringProp name="Argument.name">YP_client_secret</stringProp>
            <stringProp name="Argument.value">ec75ee00cf7d6c4a659cca70badab60c9938acf5aee1c18cf4c6c6e845d6fe88</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="clientId" elementType="Argument">
            <stringProp name="Argument.name">clientId</stringProp>
            <stringProp name="Argument.value">267a651cf985861bef49f5cc534f4014</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="clientSecret" elementType="Argument">
            <stringProp name="Argument.name">clientSecret</stringProp>
            <stringProp name="Argument.value">ec75ee00cf7d6c4a659cca70badab60c9938acf5aee1c18cf4c6c6e845d6fe88</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">BCPPWVIRTUALNIUBIZ</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password_niubiz" elementType="Argument">
            <stringProp name="Argument.name">password_niubiz</stringProp>
            <stringProp name="Argument.value">Pdp123456!</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="virtual_interop_user" elementType="Argument">
            <stringProp name="Argument.name">virtual_interop_user</stringProp>
            <stringProp name="Argument.value">OPEINTEROP</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="virtual_interop_password" elementType="Argument">
            <stringProp name="Argument.name">virtual_interop_password</stringProp>
            <stringProp name="Argument.value">Dev@UAT#250112</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Username_CCE" elementType="Argument">
            <stringProp name="Argument.name">Username_CCE</stringProp>
            <stringProp name="Argument.value">19f8b92712f55c9a</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Password_CCE" elementType="Argument">
            <stringProp name="Argument.name">Password_CCE</stringProp>
            <stringProp name="Argument.value">27420429879f7003c03afc2b4ac0dc2a</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cce_proxyType" elementType="Argument">
            <stringProp name="Argument.name">cce_proxyType</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cce_proxyValue" elementType="Argument">
            <stringProp name="Argument.name">cce_proxyValue</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - PRE PROD">
        <collectionProp name="Arguments.arguments">
          <elementProp name="key_encryption" elementType="Argument">
            <stringProp name="Argument.name">key_encryption</stringProp>
            <stringProp name="Argument.value">c0Mry3YWLVsr_XkG-yXpsbIsyE6LCbRJ</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="iv_encryption" elementType="Argument">
            <stringProp name="Argument.name">iv_encryption</stringProp>
            <stringProp name="Argument.value">_ZhMlsrcp6gxdIq9</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="x-api-key-inicio" elementType="Argument">
            <stringProp name="Argument.name">x-api-key-inicio</stringProp>
            <stringProp name="Argument.value">bsH1Vom7AC7Svke5Atp323aE1wilACD0aexDzPb9</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="x-api-key-operaciones" elementType="Argument">
            <stringProp name="Argument.name">x-api-key-operaciones</stringProp>
            <stringProp name="Argument.value">67HuV06a1U8jnma2UuaR77mwyreHEuCz7vsyOixA</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="x-api-key-bn" elementType="Argument">
            <stringProp name="Argument.name">x-api-key-bn</stringProp>
            <stringProp name="Argument.value">kOk2PlNDxv1pnEUKTIHWt9cXpDHcIm2zSk0Uewh0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="api-key-external-niubiz" elementType="Argument">
            <stringProp name="Argument.name">api-key-external-niubiz</stringProp>
            <stringProp name="Argument.value">uOZhpv0bJm8LpAvN8Jc0H5qX4Eqo8lea1HV9FxJI</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="x-api-key-cce" elementType="Argument">
            <stringProp name="Argument.name">x-api-key-cce</stringProp>
            <stringProp name="Argument.value">m1Tgc5Ik4T4Sfbc4QkknR7GD6x79MSek5auTEImu</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="URL_INICIO" elementType="Argument">
            <stringProp name="Argument.name">URL_INICIO</stringProp>
            <stringProp name="Argument.value">gec87qpmd.nc.mibim.pe</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="URL_OPERACIONES" elementType="Argument">
            <stringProp name="Argument.name">URL_OPERACIONES</stringProp>
            <stringProp name="Argument.value">2q0l8y51va.execute-api.us-east-1.amazonaws.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="URL_BN" elementType="Argument">
            <stringProp name="Argument.name">URL_BN</stringProp>
            <stringProp name="Argument.value">t6alxel137.execute-api.us-east-1.amazonaws.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url_token_login_niubiz" elementType="Argument">
            <stringProp name="Argument.name">url_token_login_niubiz</stringProp>
            <stringProp name="Argument.value">niubimtest.mibim.pe</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="URL_CCE" elementType="Argument">
            <stringProp name="Argument.name">URL_CCE</stringProp>
            <stringProp name="Argument.value">interopccetest.mibim.pe</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH_INICIO" elementType="Argument">
            <stringProp name="Argument.name">PATH_INICIO</stringProp>
            <stringProp name="Argument.value">/prod/d1a2/z4d/vg5d9</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH_OPERACIONES" elementType="Argument">
            <stringProp name="Argument.name">PATH_OPERACIONES</stringProp>
            <stringProp name="Argument.value">/prod/m5d4s/o7rt/f4q6d</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH_BN" elementType="Argument">
            <stringProp name="Argument.name">PATH_BN</stringProp>
            <stringProp name="Argument.value">/prod/pdp/banco-nacion/atm</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH_COMPARTAMOS_ATM" elementType="Argument">
            <stringProp name="Argument.name">PATH_COMPARTAMOS_ATM</stringProp>
            <stringProp name="Argument.value">/prod/fcompartamos_atm</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH_COMPARTAMOS_FULLCARGA" elementType="Argument">
            <stringProp name="Argument.name">PATH_COMPARTAMOS_FULLCARGA</stringProp>
            <stringProp name="Argument.value">/prod/fcompartamos_fullcarga</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Path_login_niubiz" elementType="Argument">
            <stringProp name="Argument.name">Path_login_niubiz</stringProp>
            <stringProp name="Argument.value">/v1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH_CCE" elementType="Argument">
            <stringProp name="Argument.name">PATH_CCE</stringProp>
            <stringProp name="Argument.value">/sixsti/receptor</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AuthorizationCashOutBN" elementType="Argument">
            <stringProp name="Argument.name">AuthorizationCashOutBN</stringProp>
            <stringProp name="Argument.value">Qk5BUFdWSVJUVUFMMTU1OnBueTdteC9xcG4qcUt5Sms2I0V3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AuthorizationCashOutCF" elementType="Argument">
            <stringProp name="Argument.name">AuthorizationCashOutCF</stringProp>
            <stringProp name="Argument.value">Q09NUFdWSVJUVUFMMTYzOkRldkBVQVQjMjUwMTEy</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AuthorizationCashOutYaGanaste" elementType="Argument">
            <stringProp name="Argument.name">AuthorizationCashOutYaGanaste</stringProp>
            <stringProp name="Argument.value">Q09NUFdGVUxMQ0FSR0E6cG55N214L3FwbipxS3lKazYjRXc=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="destination_entity" elementType="Argument">
            <stringProp name="Argument.name">destination_entity</stringProp>
            <stringProp name="Argument.value">BIM</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="YP_client_id" elementType="Argument">
            <stringProp name="Argument.name">YP_client_id</stringProp>
            <stringProp name="Argument.value">3e4d7250-6803-4982-b261-62b93fe9176b</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="YP_client_secret" elementType="Argument">
            <stringProp name="Argument.name">YP_client_secret</stringProp>
            <stringProp name="Argument.value">De7d1cc3-d58f-4295-a6a0#37f9d7227c9f</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="clientId" elementType="Argument">
            <stringProp name="Argument.name">clientId</stringProp>
            <stringProp name="Argument.value">267a651cf985861bef49f5cc534f4014</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="clientSecret" elementType="Argument">
            <stringProp name="Argument.name">clientSecret</stringProp>
            <stringProp name="Argument.value">ec75ee00cf7d6c4a659cca70badab60c9938acf5aee1c18cf4c6c6e845d6fe88</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">BCPPWVIRTUALNIUBIZ</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password_niubiz" elementType="Argument">
            <stringProp name="Argument.name">password_niubiz</stringProp>
            <stringProp name="Argument.value">Pdp123456!</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="virtual_interop_user" elementType="Argument">
            <stringProp name="Argument.name">virtual_interop_user</stringProp>
            <stringProp name="Argument.value">VIRTUALINTEROPCFBIM</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="virtual_interop_password" elementType="Argument">
            <stringProp name="Argument.name">virtual_interop_password</stringProp>
            <stringProp name="Argument.value">pny7mx@qpnqKyJk6#Ew</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Username_CCE" elementType="Argument">
            <stringProp name="Argument.name">Username_CCE</stringProp>
            <stringProp name="Argument.value">19f8b92712f55c9a</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Password_CCE" elementType="Argument">
            <stringProp name="Argument.name">Password_CCE</stringProp>
            <stringProp name="Argument.value">27420429879f7003c03afc2b4ac0dc2a</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dataCSV" elementType="Argument">
            <stringProp name="Argument.name">dataCSV</stringProp>
            <stringProp name="Argument.value">C:\Users\Administrator\Desktop\DATA</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Actualizar la ruta donde se encuentran los archivos CSV</stringProp>
          </elementProp>
          <elementProp name="ReportResult" elementType="Argument">
            <stringProp name="Argument.name">ReportResult</stringProp>
            <stringProp name="Argument.value">C:\Users\Administrator\Desktop\RESULTS</stringProp>
            <stringProp name="Argument.desc">Actualizar la ruta donde se exportaran los reportes de resultados</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="traza_app_generic" elementType="Argument">
            <stringProp name="Argument.name">traza_app_generic</stringProp>
            <stringProp name="Argument.value">eyJITVNfY29yZSI6IiIsInRva2VuIjoiIiwibnVtdGVsIjoiTlRFNU9URXhPRGd4T0RFPSIsIm1hY193aWZpIjoiMDI6MDA6MDA6MDA6MDA6MDAiLCJpbWVpIjoiIiwiaWRfdGVsIjoiUVc1a2NtOXBaRG82T1RKaVlXRTJaV013TW1RNFlXUTBOem82VTAwdFFUQTFOVTA2T25OaGJYTjFibWM2T2sxaGJHa3RSelV5SUUxRE1qbzZiWFEyTnpZNE9qbz0iLCJpZF9vbGQiOiJPVEppWVdFMlpXTXdNbVE0WVdRME53PT0iLCJzbyI6IkFuZHJvaWQiLCJ2ZXJzaW9uX3NvIjoiMTQiLCJtb2RlbG8iOiJTTS1BMDU1TSIsImxhcmdvIjoiMTQ1MSIsImFuY2hvIjoiNzIwIiwibG9uZ2l0dWQiOiItNzcuMDA5NDkwMSIsImxhdGl0dWQiOiItMTIuMTQyNjA3MiIsInNlc2lvbiI6ImRlMGI5OWJkLWYyYzMtNDc5Ny04ZDljLTEyMzVjMTgzYWRlMiIsInZlcnNpb24iOiIxLjAuMCIsImlkX2ZpcmViYXNlIjoiZTgwZE1HWFNURldhbE4tdkFXdHZjODpBUEE5MWJGdTV0b2s5Y3J5aVc2Zmo5Qnk3b2FneTJDcUZXY2NkUTdzeURNY0E0bC1nQURrcHBTWTM4X2xsQlJvOXlOM3lHNHRvcjlfUy1MNjNXaWdwV0Rfc2xrczRqY0xTRHExMFdXTUZSZFBOVzBlazllejVBZyIsImlkX2RpZ2l0YWxpbm4iOiJOV1ZsTmpSaVpESXROVE16WVMwMFpEVmlMVGhqWkdRdFlUZGpaV0UwWTJSaVpESTIiLCJjbGFzZV9kaXNwb3NpdGl2byI6IlNtYXJ0cGhvbmUiLCJmYWJyaWNhbnRlIjoic2Ftc3VuZyIsIm5vbWJyZV9kaXNwb3NpdGl2byI6ImEwNW0iLCJidWlsZF90aW1lIjoiMTEvMjgvMjAyNCAwNDoyNDo1MSIsInByb2Nlc2Fkb3IiOiJtdDY3NjgiLCJncHVfcmVuZGVyIjoiTWFsaS1HNTIgTUMyIiwiaWRfaW5zdGFsYWNpb24iOiJlODBkTUdYU1RGV2FsTi12QVd0dmM4IiwiYmFuZGFiYXNlIjoiQTA1NU1VQlM4Q1hLMSIsIkVNVUkiOiIifQ==</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="traza_destination_generic" elementType="Argument">
            <stringProp name="Argument.name">traza_destination_generic</stringProp>
            <stringProp name="Argument.value">eyJITVNfY29yZSI6IiIsInRva2VuIjoiIiwibnVtdGVsIjoiTlRFNU9EWXhORFF3TnpZPSIsIm1hY193aWZpIjoiMDI6MDA6MDA6MDA6MDA6MDAiLCJpbWVpIjoiIiwiaWRfdGVsIjoiUVc1a2NtOXBaRG82TWpZelkySXpNMlk1TWpabVlUQXhPRG82VTAwdFFUTXpOazA2T25OaGJYTjFibWM2T2sxaGJHa3RSelk0T2pwek5XVTRPREkxT2pvPSIsImlkX29sZCI6Ik1qWXpZMkl6TTJZNU1qWm1ZVEF4T0E9PSIsInNvIjoiQW5kcm9pZCIsInZlcnNpb25fc28iOiIxNCIsIm1vZGVsbyI6IlNNLUEzMzZNIiwibGFyZ28iOiIyMTg1IiwiYW5jaG8iOiIxMDgwIiwibG9uZ2l0dWQiOiIiLCJsYXRpdHVkIjoiIiwic2VzaW9uIjoiZTBjMzFmZWQtZTg2YS00NTRmLThmN2MtZWIxNDkxOGFhOWY5IiwidmVyc2lvbiI6IjEuMC4wIiwiaWRfZmlyZWJhc2UiOiJjUEp5djBGQlRwcTQxYW14dDUzajJHOkFQQTkxYkdFZ1hPc3RtUk5WVlVYMjFBNWRBaG5DUEdRSjVRaDlQdVhsNXFiMGVVNUw3UnhTRXdPZVdZUUtTNmlNc3Jvak56Q3dBNUhyQzhXYjFUdkh6d2Q0bXhaSjllREo1V3VvY3cxWlJUanhjZHE1ejBoeXE4IiwiaWRfZGlnaXRhbGlubiI6IlkyUmlPVE5oTnpNdFpEUmlOaTAwTUdKaExUa3dPVGd0TWpCa1pqUm1ObVJtWlRnNCIsImNsYXNlX2Rpc3Bvc2l0aXZvIjoiU21hcnRwaG9uZSIsImZhYnJpY2FudGUiOiJzYW1zdW5nIiwibm9tYnJlX2Rpc3Bvc2l0aXZvIjoiYTMzeCIsImJ1aWxkX3RpbWUiOiIwOC8yMy8yMDI0IDA5OjAzOjQzIiwicHJvY2VzYWRvciI6InM1ZTg4MjUiLCJncHVfcmVuZGVyIjoiTWFsaS1HNjgiLCJpZF9pbnN0YWxhY2lvbiI6ImNQSnl2MEZCVHBxNDFhbXh0NTNqMkciLCJiYW5kYWJhc2UiOiJBMzM2TVVCVUFFWEgzIiwiRU1VSSI6IiJ9,MDAwMjAxMDEwMjExMzkzMjgwYjBhYWU5Mjg0MDVjM2NhZGJjM2QwNmY5YmM4OWM1NTIwNDU2MTE1MzAzNjA0NTgwMlBFNTkwNllBUEVSTzYwMDRMaW1hNjMwNDc3Mzk=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">true</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="FUNCIONALIDADES CORE - GRUPO1 - CARGA INICIAL">
        <intProp name="ThreadGroup.num_threads">5</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <longProp name="ThreadGroup.duration">3600</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="RANDOM ORDER CONTROLLER - GRUPO1"/>
        <hashTree>
          <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="F0032 - Poner Plata" enabled="false"/>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config">
              <stringProp name="filename">${dataCSV}\parte_01.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user},msisdn_Encode)}
${__base64Encode(${msisdn_user}:${password},AuthorizationEncode)}</stringProp>
              <stringProp name="RESPONSE_DATA">${msisdn_Encode}
${AuthorizationEncode}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">// Obtener la fecha y hora actuales
def now = new Date()

// Crear un timestamp personalizado en formato &apos;yyyyMMddHHmm&apos;
def customString = now.format(&apos;yyyyMMddHHmmss&apos;)

// Crear la cadena personalizada final (agregando &quot;PDP&quot; al principio)
def transaction = &quot;PDP&quot; + customString + vars.get(&quot;msisdn_user&quot;)

// Almacenar la variable en JMeter
vars.put(&quot;transaction_id&quot;, transaction)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0032: Cashin Compartamos">
              <stringProp name="HTTPSampler.domain">prd.pdp.internal</stringProp>
              <stringProp name="HTTPSampler.port">2324</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.path">/prod/fcompartamos_app/cashin</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;sendingfri&quot;: &quot;COMPWVIRTUAL163&quot;,&#xd;
    &quot;receivingfri&quot;: &quot;${msisdn_user}&quot;,&#xd;
    &quot;amount&quot;: &quot;10.00&quot;,&#xd;
    &quot;external_id&quot;: &quot;${transaction_id}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic Q09NUFdWSVJUVUFMMTYzOkRldkBVQVQjMjUwMTEy</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0035_3 - Sacar Plata (EC2 e Integración Directa)" enabled="false">
            <stringProp name="TestPlan.comments">ESC003: Retiro de plata por oficina Compartamos desde BIM</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\Data.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.group</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user},msisdn_Encode)}
${__base64Encode(${msisdn_user}:${password},AuthorizationEncode)}</stringProp>
              <stringProp name="RESPONSE_DATA">${msisdn_Encode}
${AuthorizationEncode}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0035_3: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0035_3: lf-mdw-entidadessacaplataexterno-entidadessacaplataexterno" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/a3zc2u86</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;msisdn&quot;: &quot;${msisdn_Encode}&quot;,&#xd;
    &quot;emisor&quot;: &quot;RkNPTVBBUlRBTU9T&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Basic ${AuthorizationEncode}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_Encode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token SacaPlata" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenSacaPlata</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0035_3: lf-mdw-sacar-plata-otp-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/7exhuo6v</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${RkNPTVBBUlRBTU9T}&quot;,&#xd;
    &quot;amount&quot;: &quot;MjA=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenSacaPlata}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_Encode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp OTP" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">otp</stringProp>
                  <stringProp name="RegexExtractor.regex"> &quot;otp&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesDecode" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">${__base64Decode(${otp},otpDecode)}</stringProp>
                <stringProp name="RESPONSE_DATA">${otpDecode}</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Obtener la fecha y hora actuales
def now = new Date()

// Crear un timestamp personalizado en formato &apos;yyyyMMddHHmm&apos;
def customString = now.format(&apos;yyyyMMddHHmm&apos;)

// Crear la cadena personalizada final (agregando &quot;PDP&quot; al principio)
def transaction = &quot;PDP&quot; + customString

// Almacenar la variable en JMeter
vars.put(&quot;transaction_id&quot;, transaction)</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0035_3: Cashout Compartamos" enabled="true">
                <stringProp name="TestPlan.comments">Log: log_group_fcompartamos_co_test</stringProp>
                <stringProp name="HTTPSampler.domain">prd.pdp.internal</stringProp>
                <stringProp name="HTTPSampler.port">2325</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_COMPARTAMOS_ATM}/atmcashout</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;msisdn&quot;: &quot;${msisdn_user}&quot;,&#xd;
    &quot;otp&quot;: &quot;${otpDecode}&quot;,&#xd;
    &quot;amount&quot;: &quot;20&quot;, &#xd;
    &quot;external_transaction_id&quot;: &quot;${transaction_id}&quot; &#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Basic ${AuthorizationCashOutCF}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0038_1 - Pagar Servicios - Telefonía" enabled="false">
            <stringProp name="TestPlan.comments">ESC001: Pagar servicios por Recaudador WU</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_02.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.group</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user},msisdn_user_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${msisdn_user_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_1: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_1: lf-mdw-listar-categorias-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/aw68br9z</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;perfil_user&quot;:&quot;QklNRVI=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Categoria" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenCategoria</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_1: lf-mdw-listar-empresas-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/7mefml3g</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;categoria&quot;: &quot;VGVsZWZvbsOtYQ==&quot;,&#xd;
    &quot;pagina_actual&quot;: &quot;MQ==&quot;,&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTU=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;QklNRVI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenCategoria}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Empresa" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenEmpresa</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_1: lf-mdw-listar-empresas-buscador-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/x8asmm0u</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTU=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;QklNRVI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;empresa&quot;: &quot;TW92aXN0YXI=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_1: lf-mdw-consulta-deuda-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q0iu80rb</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;param_ordinal&quot;: &quot;MQ==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;idCliente&quot;: &quot;MDAwMzJAV1U=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjAwNTk=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;,&#xd;
    &quot;param_valor&quot;: &quot;MzI2NTk2&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp deuda_total" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">deuda_total</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;deuda_total&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp datos_adicionales" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">datos_adicionales</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;datos_adicionales&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaDeuda" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaDeuda</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_1: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${deuda_total}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaDeuda}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_1: lf-mdw-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/1qw2q7hh</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;servicio&quot;: &quot;Rmlqbw==&quot;,&#xd;
    &quot;idTransaccionPDP&quot;: &quot;&quot;,&#xd;
    &quot;param_valor&quot;: &quot;MzI2NTk2&quot;,&#xd;
    &quot;param_ordinal&quot;: &quot;MA==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;datos_adicionales&quot;: &quot;${datos_adicionales}&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${deuda_total}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idServicio&quot;: &quot;MDAwMzJAV1U=&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjAwNTk=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;empresa&quot;: &quot;TW92aXN0YXI=&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Pago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0038_2 - Pagar Servicios - Telefonía" enabled="false">
            <stringProp name="TestPlan.comments">ESC002: Pagar servicios por Recaudador Claro</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_03.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user},msisdn_user_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${msisdn_user_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_2: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_2: lf-mdw-listar-categorias-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/aw68br9z</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;perfil_user&quot;:&quot;QklNRVI=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Categoria" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenCategoria</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_2: lf-mdw-listar-empresas-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/7mefml3g</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;categoria&quot;: &quot;VGVsZWZvbsOtYQ==&quot;,&#xd;
    &quot;pagina_actual&quot;: &quot;MQ==&quot;,&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTU=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;QklNRVI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenCategoria}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Empresa" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenEmpresa</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_2: lf-mdw-consulta-deuda-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q0iu80rb</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;param_ordinal&quot;: &quot;VEVMRQ==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;idCliente&quot;: &quot;MDAwMDAyQENMQVJP&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idProducto&quot;: &quot;UkVD&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QGNsYXJv&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;,&#xd;
    &quot;param_valor&quot;: &quot;OTU3MTM1NDQ1&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp deuda_total" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">deuda_total</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;deuda_total&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp datos_adicionales" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">datos_adicionales</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;datos_adicionales&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaDeuda" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaDeuda</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp deudas" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">deudas</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;deudas&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesDecode" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">${__base64Decode(${deudas},deudasDecode)}</stringProp>
                <stringProp name="RESPONSE_DATA">${__base64Decode(${deudas},deudasDecode)}</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp idTransaccion" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">idTransaccion</stringProp>
                  <stringProp name="RegexExtractor.regex">&apos;idTransaccion&apos;: &apos;(.+?)&apos;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">${__base64Encode(${idTransaccion}@claro,idTransaccionEncode)}</stringProp>
                <stringProp name="RESPONSE_DATA">${idTransaccionEncode}</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_2: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${deuda_total}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaDeuda}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_2: lf-mdw-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/1qw2q7hh</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;servicio&quot;: &quot;TsO6bWVybyBkZSBjZWx1bGFyIC8gRmlqbw==&quot;,&#xd;
    &quot;idTransaccionPDP&quot;: &quot;${idTransaccionEncode}&quot;,&#xd;
    &quot;param_valor&quot;: &quot;OTU3MTM1NDQ1&quot;,&#xd;
    &quot;param_ordinal&quot;: &quot;MA==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;datos_adicionales&quot;: &quot;${datos_adicionales}&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${deuda_total}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idServicio&quot;: &quot;MDAwMDAyQENMQVJP&quot;,&#xd;
    &quot;idProducto&quot;: &quot;UkVD&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QGNsYXJv&quot;,&#xd;
    &quot;empresa&quot;: &quot;Q2xhcm8=&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Pago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0038_3 - Pagar Servicios - Telefonía" enabled="false">
            <stringProp name="TestPlan.comments">ESC003: Pagar servicios por Recaudador Bitel</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_04.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user},msisdn_user_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${msisdn_user_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_3: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_3: lf-mdw-listar-categorias-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/aw68br9z</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;perfil_user&quot;:&quot;QklNRVI=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Categoria" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenCategoria</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_3: lf-mdw-listar-empresas-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/7mefml3g</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;categoria&quot;: &quot;VGVsZWZvbsOtYQ==&quot;,&#xd;
    &quot;pagina_actual&quot;: &quot;MQ==&quot;,&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTU=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;QklNRVI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenCategoria}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Empresa" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenEmpresa</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_3: lf-mdw-consulta-deuda-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q0iu80rb</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;param_ordinal&quot;: &quot;MQ==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;idCliente&quot;: &quot;MDAwMDAyQEJJVEVMU1A=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idProducto&quot;: &quot;MQ==&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QGJpdGVs&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;,&#xd;
    &quot;param_valor&quot;: &quot;OTg2MTQ0MDc2&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="false">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp deuda_total" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">deuda_total</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;deuda_total&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp datos_adicionales" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">datos_adicionales</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;datos_adicionales&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp deudas" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">deudas</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;deudas&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaDeuda" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaDeuda</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesDecode" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">${__base64Decode(${deudas},deudasDecode)}</stringProp>
                <stringProp name="RESPONSE_DATA">${__base64Decode(${deudas},deudasDecode)}</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp idTransaccion" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">idTransaccion</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;idTransaccion&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">${__base64Encode(${idTransaccion}@bitel,idTransaccionEncode)}</stringProp>
                <stringProp name="RESPONSE_DATA">${__base64Encode(${idTransaccion}@bitel,idTransaccionEncode)}</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_3: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${deuda_total}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaDeuda}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_3: lf-mdw-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/1qw2q7hh</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;servicio&quot;: &quot;UG9zdHBhZ28=&quot;,&#xd;
    &quot;idTransaccionPDP&quot;: &quot;${idTransaccionEncode}&quot;,&#xd;
    &quot;param_valor&quot;: &quot;OTg2MTQ0MDc2&quot;,&#xd;
    &quot;param_ordinal&quot;: &quot;MA==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;datos_adicionales&quot;: &quot;${datos_adicionales}&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${deuda_total}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idServicio&quot;: &quot;MDAwMDAyQEJJVEVMU1A=&quot;,&#xd;
    &quot;idProducto&quot;: &quot;MQ==&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QGJpdGVs&quot;,&#xd;
    &quot;empresa&quot;: &quot;Qml0ZWw=&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Pago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0038_4 - Pagar Servicios - Telefonía" enabled="false">
            <stringProp name="TestPlan.comments">ESC004: Pagar por servicios por Recaudador Azulito</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_05.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user},msisdn_user_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${msisdn_user_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_4: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_4: lf-mdw-listar-categorias-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/aw68br9z</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;perfil_user&quot;:&quot;QklNRVI=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Categoria" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenCategoria</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_4: lf-mdw-listar-empresas-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/7mefml3g</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;categoria&quot;: &quot;VGVsZWZvbsOtYQ==&quot;,&#xd;
    &quot;pagina_actual&quot;: &quot;MQ==&quot;,&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTU=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;QklNRVI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenCategoria}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Empresa" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenEmpresa</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_4: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;NS4wMA==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_4: lf-mdw-pago-servicios-offline-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dyhrsv9l</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;monto&quot;: &quot;NS4wMA==&quot;,&#xd;
    &quot;codigo_pago&quot;: &quot;MTIzNDU2Nw==&quot;,&#xd;
    &quot;subtipo&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QGF6dWxpdG9fcGRw&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b2ZmbGluZQ==&quot;,&#xd;
    &quot;idservicio&quot;: &quot;MDAwMDAyQEFaVUxJVE8=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0039_1 - Paga Compartamos" enabled="false">
            <stringProp name="TestPlan.comments">ESC001: Depositar ahorro grupal</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_06.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.Base64

def numero = vars.get(&quot;msisdn_user&quot;) 
def contrasena = vars.get(&quot;password&quot;) 
def credencial = numero + &quot;:&quot; + contrasena
def encodeCredentials = &quot;Basic &quot; + Base64.getEncoder().encodeToString(credencial.getBytes(&quot;UTF-8&quot;))
vars.put(&quot;Authorization&quot;, encodeCredentials)

</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user},msisdnUserEncode)}</stringProp>
              <stringProp name="RESPONSE_DATA">${msisdnUserEncode}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_1: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_1: lf-mdw-consulta-inicio-pago-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/eybieuin</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;traza_app&quot;:&quot;${traza_app_generic}&quot;,&#xd;
	&quot;perfil_user&quot;:&quot;VVNVQVJJT19GSU5BTA==&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${Authorization}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Consulta Inicio" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaInicio</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_1: lf-mdw-consulta-ahorro-grupal-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/2ihzu8hc</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;traza_app&quot;:&quot;${traza_app}&quot;,&#xd;
&quot;numero_cuenta&quot;:&quot;MDA0NjI5NzgwMDAwMDE=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${Authorization}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaInicio}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Consulta Ahorro" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaAhorro</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_1: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdnUserEncode}&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;bWVyY2hhbnRwYXltZW50&quot;,&#xd;
    &quot;monto&quot;: &quot;MQ==&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QGZjb21wYXJ0YW1vcw==&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${Authorization}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaAhorro}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_1: lf-mdw-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/1qw2q7hh</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdnUserEncode}&quot;,&#xd;
    &quot;idTransaccionPDP&quot;: &quot;&quot;,&#xd;
    &quot;param_valor&quot;: &quot;MDA0NjI5NzgwMDAwMDE=&quot;,&#xd;
    &quot;param_ordinal&quot;: &quot;MQ==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;datos_adicionales&quot;: &quot;&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MQ==&quot;, &#xd;
    &quot;tipo_trx&quot;: &quot;bWVyY2hhbnRwYXltZW50&quot;,&#xd;
    &quot;monto&quot;: &quot;MQ==&quot;,&#xd;
    &quot;idServicio&quot;: &quot;MDAwMDAxQEZDT01QQVJUQU1PUw==&quot;,&#xd;
    &quot;idProducto&quot;: &quot;MQ==&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QGZjb21wYXJ0YW1vcw==&quot;,&#xd;
    &quot;empresa&quot;: &quot;Q29tcGFydGFtb3MgRmluYW5jaWVyYQ==&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;,&#xd;
    &quot;servicio&quot;:&quot;RGVwb3NpdGEgdHUgYWhvcnJv&quot;&#xd;
&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0039_2 - Paga Compartamos" enabled="false">
            <stringProp name="TestPlan.comments">ESC002: Recaudación grupal con código</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_07.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.Base64

def numero = vars.get(&quot;msisdn_user&quot;) 
def contrasena = vars.get(&quot;password&quot;) 
def credencial = numero + &quot;:&quot; + contrasena
def encodeCredentials = &quot;Basic &quot; + Base64.getEncoder().encodeToString(credencial.getBytes(&quot;UTF-8&quot;))
vars.put(&quot;Authorization&quot;, encodeCredentials)

</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user},msisdnUserEncode)}</stringProp>
              <stringProp name="RESPONSE_DATA">${msisdnUserEncode}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_2: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_2: lf-mdw-consulta-inicio-pago-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/eybieuin</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;traza_app&quot;:&quot;${traza_app_generic}&quot;,&#xd;
 &quot;perfil_user&quot;:&quot;VVNVQVJJT19GSU5BTA==&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${Authorization}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Consulta Inicio" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaInicio</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_2: lf-mdw-consulta-credito-grupal-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/jxwgk0rv</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdnUserEncode}&quot;,&#xd;
    &quot;codigo_credito&quot;: &quot;MTUwMzQ5MDM=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${Authorization}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaInicio}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">datos_adicionales</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;datos_adicionales&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">import java.util.Base64
import groovy.json.JsonSlurper

// Obtener el valor capturado por el extractor
def encodedData = vars.get(&quot;datos_adicionales&quot;)

// Decodificar Base64
def decodedData = new String(Base64.getDecoder().decode(encodedData), &quot;UTF-8&quot;)

// Reemplazar las comillas simples por comillas dobles y &quot;None&quot; por &quot;null&quot;
decodedData = decodedData.replace(&quot;&apos;&quot;, &quot;\&quot;&quot;).replace(&quot;None&quot;, &quot;null&quot;)

// Guardar el JSON decodificado en una nueva variable
vars.put(&quot;decodedData&quot;, decodedData)
log.info(&quot;-------------MENSAJE---------------&quot; + decodedData)

// La cadena JSON extraída previamente
def jsonString = vars.get(&quot;decodedData&quot;) // Reemplaza con el nombre de tu variable

// Parsear la cadena como JSON
def jsonParser = new JsonSlurper()
def jsonObject = jsonParser.parseText(jsonString)

// Extraer el valor de &apos;pnMorCuo&apos;
def pnMorCuo = jsonObject.paCuota[0].pnMorCuo
def pnTotCuo = jsonObject.paCuota[0].pnTotCuo
def idTransaccion = jsonObject.paCuota[0].idTransaccion

// Guardar el valor en una variable de JMeter
vars.put(&quot;pnMorCuo&quot;, pnMorCuo.toString())
vars.put(&quot;pnTotCuo&quot;, pnTotCuo.toString())
vars.put(&quot;idTransaccion&quot;, idTransaccion.toString())

// Imprimir en los logs para verificar (opcional)
log.info(&quot;-------------Valor de pnMorCuo: ----------&quot; + pnMorCuo)
log.info(&quot;-------------Valor de pnMorCuo: ----------&quot; + pnTotCuo)
log.info(&quot;-------------Valor de pnMorCuo: ----------&quot; + idTransaccion)
</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Consulta CG" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaCG</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_2: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdnUserEncode}&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;bWVyY2hhbnRwYXltZW50&quot;,&#xd;
    &quot;monto&quot;: &quot;MQ==&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QGZjb21wYXJ0YW1vcw==&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${Authorization}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaCG}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_2: lf-mdw-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/1qw2q7hh</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
        &quot;servicio&quot;: &quot;UGFnYSBjcsOpZGl0byBncnVwYWw=&quot;,&#xd;
        &quot;idTransaccionPDP&quot;: &quot;&quot;,&#xd;
        &quot;param_valor&quot;: &quot;MTUwMzQ5MDM=&quot;,&#xd;
        &quot;param_ordinal&quot;: &quot;MQ==&quot;,&#xd;
        &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
        &quot;datos_adicionales&quot;: &quot;${datos_adicionales}&quot;,&#xd;
        &quot;pago_parcial&quot;: &quot;MQ==&quot;,&#xd;
        &quot;tipo_trx&quot;: &quot;bWVyY2hhbnRwYXltZW50&quot;,&#xd;
        &quot;monto&quot;: &quot;MjAuMDA=&quot;,&#xd;
        &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
        &quot;idServicio&quot;: &quot;MDAwMDAzQEZDT01QQVJUQU1PUw==&quot;,&#xd;
        &quot;idProducto&quot;: &quot;MQ==&quot;,&#xd;
        &quot;recaudador&quot;: &quot;QGZjb21wYXJ0YW1vcw==&quot;,&#xd;
        &quot;empresa&quot;: &quot;Q29tcGFydGFtb3MgRmluYW5jaWVyYQ==&quot;,&#xd;
        &quot;operador&quot;: &quot;${msisdnUserEncode}&quot;,&#xd;
        &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
 }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import java.util.Base64

def ext_pnMorCuo = vars.get(&quot;ext_pnMorCuo&quot;) 
def ext_pnTotCuo = vars.get(&quot;ext_pnTotCuo&quot;) 
def ext_idTransaccion = vars.get(&quot;ext_idTransaccion&quot;) 


def datos_finales = &quot;{&apos;paCuota&apos;: [{&apos;pnOtrCuo&apos;: None, &apos;pnPenCuo&apos;: None, &apos;pcComent&apos;: None, &apos;pnImpMin&apos;: None, &apos;pnGastos&apos;: 0.0, &apos;pnMorCuo&apos;:&quot;+ ext_pnMorCuo +&quot;, &apos;simboloMoneda&apos;: None, &apos;pnComCuo&apos;: 0.0, &apos;pnCapCuo&apos;: 0.0, &apos;pnTotCuo&apos;: &quot;+ ext_pnTotCuo +&quot;, &apos;pcMoneda&apos;: &apos;PEN&apos;, &apos;pdFecVenCuo&apos;: &apos;2024-05-10T00:00:00&apos;, &apos;pnNroCuo&apos;: 5, &apos;pcCodCta&apos;: &apos;14709449&apos;, &apos;pnIntCuo&apos;: 0.0, &apos;totalCuotas&apos;: None, &apos;idTransaccion&apos;: &apos;&quot;+ ext_idTransaccion +&quot;&apos;}], &apos;paCuenta&apos;: [{&apos;pcComent&apos;: None, &apos;pnImpMin&apos;: None, &apos;pnCuoPen&apos;: None, &apos;pnCuoPag&apos;: None, &apos;pnCuotas&apos;: None, &apos;pdFecVen&apos;: None, &apos;pnCuoAct&apos;: None, &apos;pcDesPdc&apos;: None, &apos;pnSalTot&apos;: None, &apos;pnSalMor&apos;: None, &apos;pnSalCom&apos;: None, &apos;pnSalInt&apos;: None, &apos;pnSalCap&apos;: None, &apos;pnMonDes&apos;: None, &apos;pcMoneda&apos;: None, &apos;pcCodCta&apos;: &apos;14709449&apos;, &apos;pnGastos&apos;: None, &apos;pnSaToAn&apos;: None}]}&quot;



def encodeCredentials = Base64.getEncoder().encodeToString(datos_finales.getBytes(&quot;UTF-8&quot;))
vars.put(&quot;datos_finales&quot;, encodeCredentials)
</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0039_3 - Paga Compartamos" enabled="false">
            <stringProp name="TestPlan.comments">ESC003: Recaudación grupal con DNI</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_08.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.Base64

def numero = vars.get(&quot;msisdn_user&quot;) 
def contrasena = vars.get(&quot;password&quot;) 
def credencial = numero + &quot;:&quot; + contrasena
def encodeCredentials = &quot;Basic &quot; + Base64.getEncoder().encodeToString(credencial.getBytes(&quot;UTF-8&quot;))
vars.put(&quot;Authorization&quot;, encodeCredentials)

</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user},msisdnUserEncode)}</stringProp>
              <stringProp name="RESPONSE_DATA">${msisdnUserEncode}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_3: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_3: lf-mdw-consulta-inicio-pago-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/eybieuin</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;traza_app&quot;:&quot;${traza_app_generic}&quot;,&#xd;
	&quot;perfil_user&quot;:&quot;VVNVQVJJT19GSU5BTA==&quot;,&#xd;
	&quot;msisdn&quot;:&quot;${msisdnUserEncode}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${Authorization}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaInicio" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaInicio</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_3: lf-mdw-consulta-creditos-grupales-dni-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/5g0jc5wt</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdnUserEncode}&quot;,&#xd;
    &quot;dni&quot;: &quot;MTUwMzQ5MDM=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${Authorization}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaInicio}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp group_loan" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">group_loan</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;group_loan&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Consulta CG" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaCG</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesDecode" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">${__base64Decode(${group_loan},group_loan_decode)}</stringProp>
                <stringProp name="RESPONSE_DATA">${group_loan_decode}</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp group_loan" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">CodCG</stringProp>
                  <stringProp name="RegexExtractor.regex"> &quot;code_group_credit&quot;: (.+?),</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">${__base64Encode(${CodCG},CodCG_Decode)}</stringProp>
                <stringProp name="RESPONSE_DATA">${CodCG_Decode}</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_3: lf-mdw-consulta-cuotas-credito-grupal-usuario-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/s4dvl4v9</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;user_dni&quot;: &quot;MTUwMzQ5MDM=&quot;,&#xd;
    &quot;credit_number&quot;: &quot;${CodCG_Decode}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${Authorization}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaCG}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ext_idTransaccion" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ext_idTransaccion</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;idTransaccion&quot;: &quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaCuota CG" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaCuotaCG</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="additional_data" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">additional_data</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;additional_data&quot;: &quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesDecode" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">${__base64Decode(${ext_idTransaccion},ext_idTransaccion_decode)}</stringProp>
                <stringProp name="RESPONSE_DATA">${ext_idTransaccion_decode}</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree/>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">${__base64Encode(${ext_idTransaccion_decode}@fcompartamos,dummy2_ext_idTransaccion)}</stringProp>
                <stringProp name="RESPONSE_DATA">${dummy2_ext_idTransaccion}</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_3: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdnUserEncode}&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;bWVyY2hhbnRwYXltZW50&quot;,&#xd;
    &quot;monto&quot;: &quot;MQ==&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QGZjb21wYXJ0YW1vcw==&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${Authorization}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaCuotaCG}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonOutput
def numeroTransaccion = vars.get(&quot;dummy_ext_idTransaccion&quot;) 
def def_datosAdicionales = [
    &quot;paCuota&quot;: [
        [
            &quot;pnOtrCuo&quot;: null, 
            &quot;pnPenCuo&quot;: null, 
            &quot;pcComent&quot;: null, 
            &quot;pnImpMin&quot;: null, 
            &quot;pnGastos&quot;: 0.0, 
            &quot;pnMorCuo&quot;: 0.0, 
            &quot;simboloMoneda&quot;: null, 
            &quot;pnComCuo&quot;: 0.0, 
            &quot;pnCapCuo&quot;: 0.0, 
            &quot;pnTotCuo&quot;: null, 
            &quot;pcMoneda&quot;: &quot;PEN&quot;, 
            &quot;pdFecVenCuo&quot;: &quot;2024-08-05&quot;, 
            &quot;pnNroCuo&quot;: 15034913, 
            &quot;pcCodCta&quot;: &quot;15034903&quot;, 
            &quot;pnIntCuo&quot;: null, 
            &quot;totalCuotas&quot;: null, 
            &quot;idTransaccion&quot;: &quot;${numeroTransaccion}&quot;
        ]
    ],
    &quot;paCuenta&quot;: [
        [
            &quot;pcComent&quot;: null, 
            &quot;pnImpMin&quot;: null, 
            &quot;pnCuoPen&quot;: null, 
            &quot;pnCuoPag&quot;: null, 
            &quot;pnCuotas&quot;: null, 
            &quot;pdFecVen&quot;: null, 
            &quot;pnCuoAct&quot;: null, 
            &quot;pcDesPdc&quot;: null, 
            &quot;pnSalTot&quot;: null, 
            &quot;pnSalMor&quot;: null, 
            &quot;pnSalCom&quot;: null, 
            &quot;pnSalInt&quot;: null, 
            &quot;pnSalCap&quot;: null, 
            &quot;pnMonDes&quot;: null, 
            &quot;pcMoneda&quot;: null, 
            &quot;pcCodCta&quot;: &quot;15034903&quot;, 
            &quot;pnGastos&quot;: null, 
            &quot;pnSaToAn&quot;: null
        ]
    ],
    &quot;poListaDetallePago&quot;: [
        &quot;DetallePago&quot;: [
            [
                &quot;pnMonto&quot;: null, 
                &quot;pcTipoDocumento&quot;: 1, 
                &quot;pcDocumento&quot;: &quot;44675537&quot;
            ]
        ]
    ]
]

// Convertir a JSON
def datosAdicionalesJson = JsonOutput.toJson(def_datosAdicionales)

// Guardar la variable
vars.put(&quot;def_datosAdicionales&quot;, datosAdicionalesJson)

// Log para depuración
log.info(&quot;-------------------DATOS ADICIONALES-------------&quot;)
log.info(datosAdicionalesJson)
log.info(&quot;---------------idtrasaccion ---------------------:&quot; + numeroTransaccion)



</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="false">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">${__base64Encode(${def_datosAdicionales},dummy_datosAdicionalesJson)}</stringProp>
                <stringProp name="RESPONSE_DATA">${dummy_datosAdicionalesJson}
</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_3: lf-mdw-pago-credito-grupal-usuario-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/a9qyb3ka</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdnUserEncode}&quot;,&#xd;
    &quot;idTransaccionPDP&quot;: &quot;${dummy2_ext_idTransaccion}&quot;,&#xd;
    &quot;param_valor&quot;: &quot;${CodCG_Decode}&quot;,&#xd;
    &quot;param_ordinal&quot;: &quot;MQ==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;datos_adicionales&quot;: &quot;${additional_data}&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MQ==&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;bWVyY2hhbnRwYXltZW50&quot;,&#xd;
    &quot;monto&quot;: &quot;MTA=&quot;,&#xd;
    &quot;idServicio&quot;: &quot;MDAwMDA0QEZDT01QQVJUQU1PUw==&quot;,&#xd;
    &quot;idProducto&quot;: &quot;MQ==&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QGZjb21wYXJ0YW1vcw==&quot;,&#xd;
    &quot;empresa&quot;: &quot;Q29tcGFydGFtb3MgRmluYW5jaWVyYQ==&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;,&#xd;
    &quot;servicio&quot;:&quot;UGFnYSBjcsOpZGl0byBncnVwYWw=&quot;&#xd;
&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0040_1 - Paga Los andes" enabled="false">
            <stringProp name="TestPlan.comments">ESC001: Pagar CR Andes</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_09.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user}:${password},AuthorizationEncode)}
${__base64Encode(${msisdn_user},msisdn_Encode)}</stringProp>
              <stringProp name="RESPONSE_DATA">${AuthorizationEncode}
${msisdn_Encode}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0040_1: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0040_1: lf-mdw-perfil-app-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/6hdqwkh2</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;msisdn&quot;: &quot;${msisdn_Encode}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Basic ${AuthorizationEncode}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_Encode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token PerfilBIM" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenPerfilBIM</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0040_1: lf-mdw-consulta-deuda-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q0iu80rb</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;param_ordinal&quot;: &quot;MQ==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MQ==&quot;,&#xd;
    &quot;idCliente&quot;: &quot;MDAwMDA0QENSQU5ERVM=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idProducto&quot;: &quot;MQ==&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QGNyYW5kZXM=&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_Encode}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;,&#xd;
    &quot;param_valor&quot;: &quot;MTI4OTc0NA==&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenPerfilBIM}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_Encode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp DatosAdicionales" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">DatosAdicionales</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;datos_adicionales&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaDeuda" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaDeuda</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0040_1: lf-mdw-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/1qw2q7hh</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;servicio&quot;: &quot;UGFnbyBlbiBsw61uZWE=&quot;,&#xd;
    &quot;idTransaccionPDP&quot;: &quot;&quot;,&#xd;
    &quot;param_valor&quot;: &quot;MTI4OTc0NA==&quot;,&#xd;
    &quot;param_ordinal&quot;: &quot;MA==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;datos_adicionales&quot;: &quot;${DatosAdicionales}&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MQ==&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;bWVyY2hhbnRwYXltZW50&quot;,&#xd;
    &quot;monto&quot;: &quot;MjguNzE=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idServicio&quot;: &quot;MDAwMDA0QENSQU5ERVM=&quot;,&#xd;
    &quot;idProducto&quot;: &quot;MQ==&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QGNyYW5kZXM=&quot;,&#xd;
    &quot;empresa&quot;: &quot;Q2FqYSBSdXJhbCBMb3MgQW5kZXM=&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_Encode}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaDeuda}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_Encode}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0042_1 - Pagar Servicios - Financieros" enabled="false">
            <stringProp name="TestPlan.comments">ESC001: Pagar Servicios - Financieros con recaudador WU</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_10.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user}:${password},AuthorizationEncode)}
${__base64Encode(${msisdn_user},msisdn_user_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${AuthorizationEncode}
${msisdn_user_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              <stringProp name="TestPlan.comments">Encodear en B64 el msisdn</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0042_1: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0042_1: lf-mdw-listar-categorias-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/aw68br9z</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;perfil_user&quot;:&quot;QklNRVI=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Categoria" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenCategoria</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0042_1: lf-mdw-listar-empresas-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/7mefml3g</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;categoria&quot;: &quot;RmluYW5jaWVybw==&quot;,&#xd;
    &quot;pagina_actual&quot;: &quot;MQ==&quot;,&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTE=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;VVNVQVJJT19GSU5BTA==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenCategoria}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Empresa" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenEmpresa</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0042_1: lf-mdw-listar-empresas-buscador-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/x8asmm0u</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTE=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;VVNVQVJJT19GSU5BTA==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;empresa&quot;: &quot;QmFuY28gUGljaGluY2hh&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0042_1: lf-mdw-consulta-deuda-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q0iu80rb</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;param_ordinal&quot;: &quot;MQ==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;idCliente&quot;: &quot;MDAwOTBAV1U=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjAyMjk=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;,&#xd;
    &quot;param_valor&quot;: &quot;OTk5NDMyMzk=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp deuda_total" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">deuda_total</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;deuda_total&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp datos_adicionales" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">datos_adicionales</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;datos_adicionales&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaDeuda" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaDeuda</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0042_1: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${deuda_total}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaDeuda}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0042_1: lf-mdw-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/1qw2q7hh</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;servicio&quot;: &quot;UGFnbyBkZSBwcsOpc3RhbW9z&quot;,&#xd;
    &quot;idTransaccionPDP&quot;: &quot;&quot;,&#xd;
    &quot;param_valor&quot;: &quot;OTk5NDMyMzk=&quot;,&#xd;
    &quot;param_ordinal&quot;: &quot;MA==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;datos_adicionales&quot;: &quot;${datos_adicionales}&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MQ==&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${deuda_total}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idServicio&quot;: &quot;MDAwOTBAV1U=&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjAyMjk=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;empresa&quot;: &quot;QmFuY28gUGljaGluY2hh&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Pago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0043_1 - Pagar Yanbal" enabled="false">
            <stringProp name="TestPlan.comments">ESC001: Pagar Yanbal</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_11.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user},msisdn_user_enc)}
${__base64Encode(${codYANBAL},codYANBAL_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${msisdn_user_enc}
${codYANBAL_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0043_1: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0043_1: lf-mdw-consulta-deuda-unique-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/rx0j35av</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;msisdn&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;param_valor&quot;: &quot;MTEyNDE2NjAxOQ==&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname=" Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp datos_adicionales" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">datos_adicionales</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;datos_adicionales&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp recaudador" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">recaudador</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;recaudador&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp montoMin" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">montoMin</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;min&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaDeuda" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsulta</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0043_1: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;datos_adicionales&quot;: &quot;${datos_adicionales}&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${montoMin}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;${recaudador}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsulta}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0043_1: lf-mdw-pagar-unique-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/uule1ey8</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;datos_adicionales&quot;: &quot;${datos_adicionales}&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${montoMin}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;${recaudador}&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;param_valor&quot;: &quot;MTEyNDE2NjAxOQ==&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="false">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0044_1 - Pagar Servicios - Belleza" enabled="false">
            <stringProp name="TestPlan.comments">ESC001: Pagos de servicio de belleza</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_12.csv</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user}:${password},AuthorizationEncode)}
${__base64Encode(${msisdn_user},msisdn_user_enc)}
${__base64Encode(${codConsulta},codConsulta_Enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${AuthorizationEncode}
${msisdn_user_enc}
${codConsulta_Enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0044_1: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0044_1: lf-mdw-listar-categorias-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/aw68br9z</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;perfil_user&quot;:&quot;QklNRVI=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Categoria" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenCategoria</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0044_1: lf-mdw-listar-empresas-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/7mefml3g</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;categoria&quot;: &quot;QmVsbGV6YQ==&quot;,&#xd;
    &quot;pagina_actual&quot;: &quot;MQ==&quot;,&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTM=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;QklNRVI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenCategoria}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Empresa" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenEmpresa</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0044_1: lf-mdw-listar-empresas-buscador-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/x8asmm0u</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTM=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;QklNRVI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;empresa&quot;: &quot;RXNpa2E=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0044_1: lf-mdw-consulta-deuda-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q0iu80rb</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;param_ordinal&quot;: &quot;MQ==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;idCliente&quot;: &quot;MDAxMDRAV1U=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1Mzk5Njc=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;operador&quot;: &quot;NTE5MzMxMjY0Mzk=&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;,&#xd;
    &quot;param_valor&quot;: &quot;NTExMjIzMw==&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp DatosAdicionales" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">DatosAdicionales</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;datos_adicionales&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Categoria" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenCategoria</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaDeuda" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaDeuda</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0044_1: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;MS4wMA==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaDeuda}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0044_1: lf-mdw-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/1qw2q7hh</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;servicio&quot;: &quot;UGFnbyBkZSBzZXJ2aWNpbw==&quot;,&#xd;
	&quot;idTransaccionPDP&quot;: &quot;&quot;,&#xd;
	&quot;param_valor&quot;: &quot;MDQ5OTg4ODM0&quot;,&#xd;
	&quot;param_ordinal&quot;: &quot;MA==&quot;,&#xd;
	&quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
	&quot;datos_adicionales&quot;: &quot;${DatosAdicionales}&quot;,&#xd;
	&quot;pago_parcial&quot;: &quot;MQ==&quot;,&#xd;
	&quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
	&quot;monto&quot;: &quot;MTAuMDA=&quot;,&#xd;
	&quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
	&quot;idServicio&quot;: &quot;MDAxMDNAV1U=&quot;,&#xd;
	&quot;idProducto&quot;: &quot;Nzc1MjAyMTU=&quot;,&#xd;
	&quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
	&quot;empresa&quot;: &quot;RXNpa2E=&quot;,&#xd;
	&quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
	&quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Pago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="lf-mdw-consulta-limite-favorito-app-bim" enabled="false">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/z09pc45d</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;perfil_user&quot;: &quot;VVNVQVJJT19GSU5BTA==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="false">
                <collectionProp name="AuthManager.auth_list">
                  <elementProp name="" elementType="Authorization">
                    <stringProp name="Authorization.url"></stringProp>
                    <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                    <stringProp name="Authorization.password">${password}</stringProp>
                    <stringProp name="Authorization.domain"></stringProp>
                    <stringProp name="Authorization.realm"></stringProp>
                  </elementProp>
                </collectionProp>
                <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
              </AuthManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="token" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${TokenPago}</stringProp>
                  </elementProp>
                  <elementProp name="msisdn" elementType="Header">
                    <stringProp name="Header.name">msisdn</stringProp>
                    <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0045_1 - Pagar Servicios - Luz" enabled="false">
            <stringProp name="TestPlan.comments">ESC001: Pagos de Servicio de Luz - RECAUDADOR WU</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_13.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user}:${password},AuthorizationEncode)}
${__base64Encode(${msisdn_user},msisdn_user_enc)}
${__base64Encode(${codConsultaWU},codConsultaWU_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${AuthorizationEncode}
${msisdn_user_enc}
${codConsultaWU_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0045_1: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0045_1: lf-mdw-listar-categorias-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/aw68br9z</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;perfil_user&quot;:&quot;QklNRVI=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Categoria" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenCategoria</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0045_1: lf-mdw-listar-empresas-buscador-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/x8asmm0u</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTI=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;QklNRVI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;empresa&quot;: &quot;RWxlY3Ryb3N1cg==&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenCategoria}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0045_1: lf-mdw-listar-empresas-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/7mefml3g</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;categoria&quot;: &quot;THV6&quot;,&#xd;
    &quot;pagina_actual&quot;: &quot;MQ==&quot;,&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTI=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;QklNRVI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenCategoria}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Empresa" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenEmpresa</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0045_1: lf-mdw-consulta-deuda-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q0iu80rb</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;param_ordinal&quot;: &quot;MQ==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;idCliente&quot;: &quot;MDAwNzRAV1U=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjAzODQ=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;,&#xd;
    &quot;param_valor&quot;: &quot;NTk1MzQ3Mg==&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp deuda_total" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">DeudaTotal</stringProp>
                  <stringProp name="RegexExtractor.regex"> &quot;deuda_total&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">DatosAdicionales</stringProp>
                  <stringProp name="RegexExtractor.regex"> &quot;datos_adicionales&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaDeuda" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaDeuda</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0045_1: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${DeudaTotal}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaDeuda}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0045_1: lf-mdw-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/1qw2q7hh</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;servicio&quot;: &quot;UGFnbyBkZSBsdXo=&quot;,&#xd;
    &quot;idTransaccionPDP&quot;: &quot;&quot;,&#xd;
    &quot;param_valor&quot;: &quot;NTk1MzQ3Mg==&quot;,&#xd;
    &quot;param_ordinal&quot;: &quot;MA==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;datos_adicionales&quot;: &quot;${DatosAdicionales}&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${DeudaTotal}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idServicio&quot;: &quot;MDAwNzRAV1U=&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjAzODQ=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;empresa&quot;: &quot;RWxlY3Ryb3N1cg==&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Pago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0046_1 - Pagar Servicios - Cable" enabled="false">
            <stringProp name="TestPlan.comments">ESC001: Pagar servicio de cable</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_14.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user}:${password},AuthorizationEncode)}
${__base64Encode(${msisdn_user},msisdn_user_enc)}
${__base64Encode(${codConsultaCable},codConsultaCable_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${AuthorizationEncode}
${msisdn_user_enc}
${codConsultaCable_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              <stringProp name="TestPlan.comments">Encodear en B64 el msisdn</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0046_1: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0046_1: lf-mdw-listar-categorias-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/aw68br9z</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;perfil_user&quot;:&quot;QklNRVI=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Categoria" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenCategoria</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0046_1: lf-mdw-listar-empresas-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/7mefml3g</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;categoria&quot;: &quot;Q2FibGU=&quot;,&#xd;
    &quot;pagina_actual&quot;: &quot;MQ==&quot;,&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUOA==&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;VVNVQVJJT19GSU5BTA==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenCategoria}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Empresa" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenEmpresa</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0046_1: lf-mdw-listar-empresas-buscador-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/x8asmm0u</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUOA==&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;VVNVQVJJT19GSU5BTA==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;empresa&quot;: &quot;RGlyZWN0dg==&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0046_1: lf-mdw-consulta-deuda-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q0iu80rb</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;param_ordinal&quot;: &quot;Mg==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;idCliente&quot;: &quot;MDAwNjFAV1U=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjAxODk=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;,&#xd;
    &quot;param_valor&quot;: &quot;MDAxMTkzODcwNTkw&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp deuda_total" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">deuda_total</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;deuda_total&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp datos_adicionales" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">datos_adicionales</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;datos_adicionales&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaDeuda" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaDeuda</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0046_1: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${deuda_total}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaDeuda}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0046_1: lf-mdw-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/1qw2q7hh</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;servicio&quot;: &quot;UmVjYXJnYSAtIE5yby4gZGUgVGFyamV0YQ==&quot;,&#xd;
    &quot;idTransaccionPDP&quot;: &quot;&quot;,&#xd;
    &quot;param_valor&quot;: &quot;MDAxMTkzODcwNTkw&quot;,&#xd;
    &quot;param_ordinal&quot;: &quot;MA==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;datos_adicionales&quot;: &quot;${datos_adicionales}&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MQ==&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${deuda_total}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idServicio&quot;: &quot;MDAwMDZAV1U=&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjAxODk=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;empresa&quot;: &quot;RGlyZWN0dg==&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Pago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0047_1 - Pagar Servicios - Gas" enabled="false">
            <stringProp name="TestPlan.comments">ESC001: Pagar servicio de gas</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_15.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user}:${password},AuthorizationEncode)}
${__base64Encode(${msisdn_user},msisdn_user_enc)}
${__base64Encode(${codConsultaGAS},codConsultaGAS_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${AuthorizationEncode}
${msisdn_user_enc}
${codConsultaGAS_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              <stringProp name="TestPlan.comments">Encodear en B64 el msisdn</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0047_1: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0047_1: lf-mdw-listar-categorias-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/aw68br9z</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;perfil_user&quot;:&quot;QklNRVI=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Categoria" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenCategoria</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0047_1: lf-mdw-listar-empresas-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/7mefml3g</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;categoria&quot;: &quot;R2Fz&quot;,&#xd;
    &quot;pagina_actual&quot;: &quot;MQ==&quot;,&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTQ=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;VVNVQVJJT19GSU5BTA==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenCategoria}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Empresa" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenEmpresa</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0047_1: lf-mdw-listar-empresas-buscador-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/x8asmm0u</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTI=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;VVNVQVJJT19GSU5BTA==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;empresa&quot;: &quot;Q2FsaWRkYQ==&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0047_1: lf-mdw-consulta-deuda-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q0iu80rb</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;param_ordinal&quot;: &quot;MQ==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;idCliente&quot;: &quot;MDAwNTFAV1U=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjAyMTM=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;,&#xd;
    &quot;param_valor&quot;: &quot;MTEyMjMz&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp deuda_total" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">deuda_total</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;deuda_total&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp datos_adicionales" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">datos_adicionales</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;datos_adicionales&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaDeuda" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaDeuda</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0047_1: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${deuda_total}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaDeuda}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0047_1: lf-mdw-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/1qw2q7hh</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;servicio&quot;: &quot;UGFnbyBkZSBnYXM=&quot;,&#xd;
    &quot;idTransaccionPDP&quot;: &quot;&quot;,&#xd;
    &quot;param_valor&quot;: &quot;MTEyMjMz&quot;,&#xd;
    &quot;param_ordinal&quot;: &quot;MA==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;datos_adicionales&quot;: &quot;${datos_adicionales}&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${deuda_total}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idServicio&quot;: &quot;MDAwNTFAV1U=&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjAyMTM=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;empresa&quot;: &quot;Q2FsaWRkYQ==&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Pago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0048_1 - Pagar Servicios - Agua" enabled="false">
            <stringProp name="TestPlan.comments">ESC001: Pagos de servicio de Agua</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_16.csv</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user}:${password},AuthorizationEncode)}
${__base64Encode(${msisdn_user},msisdn_user_enc)}
${__base64Encode(${codConsulta},codConsulta_Enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${AuthorizationEncode}
${msisdn_user_enc}
${codConsulta_Enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0048_1: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0048_1: lf-mdw-listar-categorias-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/aw68br9z</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;perfil_user&quot;:&quot;QklNRVI=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Categoria" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenCategoria</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0048_1: lf-mdw-listar-empresas-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/7mefml3g</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{   &#xd;
	&quot;categoria&quot;: &quot;QWd1YQ==&quot;,&#xd;
    &quot;pagina_actual&quot;: &quot;MQ==&quot;,&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTY=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;QklNRVI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenCategoria}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Empresa" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenEmpresa</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0048_1: lf-mdw-listar-empresas-buscador-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/x8asmm0u</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTY=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;QklNRVI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;empresa&quot;: &quot;RVBTRUw=&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0048_1: lf-mdw-consulta-deuda-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q0iu80rb</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;param_ordinal&quot;: &quot;MQ==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;idCliente&quot;: &quot;MDAwNjBAV1U=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjAwMjU=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;,&#xd;
    &quot;param_valor&quot;: &quot;NjQwMzE1Ng==&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp DatosAdicionales" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">DatosAdicionales</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;datos_adicionales&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Deudas" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Deudas</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;deudas&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaDeuda" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaDeuda</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesDecode" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">${__base64Decode(${Deudas},DeudasDec)}</stringProp>
                <stringProp name="RESPONSE_DATA">${__base64Decode(${Deudas},DeudasDec)}</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp ImporteTotal" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ImporteTotal</stringProp>
                  <stringProp name="RegexExtractor.regex">&apos;importetotal&apos;: &apos;(.+?)&apos;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp idTransaccion" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">idTransaccion</stringProp>
                  <stringProp name="RegexExtractor.regex">&apos;idTransaccion&apos;: &apos;(.+?)&apos;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">${__base64Encode(${ImporteTotal},ImporteTotal_Enc)}
${__base64Encode(${idTransaccion}@gmoney,idTransaccion_Enc)}</stringProp>
                <stringProp name="RESPONSE_DATA">${ImporteTotal_Enc}
${idTransaccion_Enc}</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0048_1: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${ImporteTotal_Enc}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaDeuda}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0048_1: lf-mdw-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/1qw2q7hh</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;servicio&quot;: &quot;UGFnbyBkZSBhZ3Vh&quot;,&#xd;
    &quot;idTransaccionPDP&quot;: &quot;${idTransaccion_Enc}&quot;,&#xd;
    &quot;param_valor&quot;: &quot;NjQwMzE1Ng==&quot;,&#xd;
    &quot;param_ordinal&quot;: &quot;MA==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;datos_adicionales&quot;: &quot;${DatosAdicionales}&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${ImporteTotal_Enc}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idServicio&quot;: &quot;MDAwNjBAV1U=&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjAwMjU=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;empresa&quot;: &quot;U2VkYXBhbA==&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="lf-mdw-consulta-limite-favorito-app-bim" enabled="false">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/z09pc45d</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;perfil_user&quot;: &quot;VVNVQVJJT19GSU5BTA==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="false">
                <collectionProp name="AuthManager.auth_list">
                  <elementProp name="" elementType="Authorization">
                    <stringProp name="Authorization.url"></stringProp>
                    <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                    <stringProp name="Authorization.password">${password}</stringProp>
                    <stringProp name="Authorization.domain"></stringProp>
                    <stringProp name="Authorization.realm"></stringProp>
                  </elementProp>
                </collectionProp>
                <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
              </AuthManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="token" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${TokenPago}</stringProp>
                  </elementProp>
                  <elementProp name="msisdn" elementType="Header">
                    <stringProp name="Header.name">msisdn</stringProp>
                    <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0049_1 - Pagar Servicios - Internet" enabled="false">
            <stringProp name="TestPlan.comments">ESC001: Pagar servicio de internet</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_17.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user}:${password},AuthorizationEncode)}
${__base64Encode(${msisdn_user},msisdn_user_enc)}
${__base64Encode(${codConsultaINTERNET},codConsultaINTERNET_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${AuthorizationEncode}
${msisdn_user_enc}
${codConsultaINTERNET_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              <stringProp name="TestPlan.comments">Encodear en B64 el msisdn</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0049_1: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0049_1: lf-mdw-listar-categorias-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/aw68br9z</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;perfil_user&quot;:&quot;QklNRVI=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Categoria" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenCategoria</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0049_1: lf-mdw-listar-empresas-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/7mefml3g</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;categoria&quot;: &quot;SW50ZXJuZXQ=&quot;,&#xd;
    &quot;pagina_actual&quot;: &quot;MQ==&quot;,&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMjQ=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;VVNVQVJJT19GSU5BTA==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenCategoria}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Empresa" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenEmpresa</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0049_1: lf-mdw-listar-empresas-buscador-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/x8asmm0u</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMjQ=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;VVNVQVJJT19GSU5BTA==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;empresa&quot;: &quot;TW92aXN0YXI=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0049_1: lf-mdw-consulta-deuda-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q0iu80rb</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;param_ordinal&quot;: &quot;MQ==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;idCliente&quot;: &quot;MDAwMzRAV1U=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjA0MDQ=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;,&#xd;
    &quot;param_valor&quot;: &quot;NjA1ODEyODQx&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp deuda_total" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">deuda_total</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;deuda_total&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp datos_adicionales" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">datos_adicionales</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;datos_adicionales&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaDeuda" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaDeuda</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0049_1: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${deuda_total}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaDeuda}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0049_1: lf-mdw-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/1qw2q7hh</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;servicio&quot;: &quot;TW92aXN0YXIgQ3VlbnRhcw==&quot;,&#xd;
    &quot;idTransaccionPDP&quot;: &quot;&quot;,&#xd;
    &quot;param_valor&quot;: &quot;NjA1ODEyODQx&quot;,&#xd;
    &quot;param_ordinal&quot;: &quot;MA==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;datos_adicionales&quot;: &quot;${datos_adicionales}&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${deuda_total}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idServicio&quot;: &quot;MDAwMzRAV1U=&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjA0MDQ=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;empresa&quot;: &quot;TW92aXN0YXI=&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0050_1 - Pagar Servicios - Impuestos" enabled="false">
            <stringProp name="TestPlan.comments">ESC001: Pagos de servicios de Impuestos</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_18.csv</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user}:${password},AuthorizationEncode)}
${__base64Encode(${msisdn_user},msisdn_user_enc)}
${__base64Encode(${codConsulta},codConsulta_Enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${AuthorizationEncode}
${msisdn_user_enc}
${codConsulta_Enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0050_1: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0050_1: lf-mdw-listar-categorias-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/aw68br9z</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;perfil_user&quot;:&quot;QklNRVI=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Categoria" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenCategoria</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0050_1: lf-mdw-listar-empresas-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/7mefml3g</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;categoria&quot;: &quot;SW1wdWVzdG9z&quot;,&#xd;
    &quot;pagina_actual&quot;: &quot;MQ==&quot;,&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMjQ=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;QklNRVI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenCategoria}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Empresa" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenEmpresa</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0050_1: lf-mdw-listar-empresas-buscador-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/x8asmm0u</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMjQ=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;QklNRVI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;empresa&quot;: &quot;U0FUIExpbWE=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0050_1: lf-mdw-consulta-deuda-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q0iu80rb</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;param_ordinal&quot;: &quot;MQ==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;idCliente&quot;: &quot;MDAwODRAV1U=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjAyNTI=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;,&#xd;
    &quot;param_valor&quot;: &quot;NzAxNjEwMjU=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp DatosAdicionales" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">DatosAdicionales</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;datos_adicionales&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp DeudaTotal" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">DeudaTotal</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;deuda_total&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaDeuda" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaDeuda</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0050_1: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${DeudaTotal}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaDeuda}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0050_1: lf-mdw-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/1qw2q7hh</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;servicio&quot;: &quot;QWxjYWJhbGEgby9EaXN0cg==&quot;,&#xd;
    &quot;idTransaccionPDP&quot;: &quot;&quot;,&#xd;
    &quot;param_valor&quot;: &quot;NzAxNjEwMjU=&quot;,&#xd;
    &quot;param_ordinal&quot;: &quot;MA==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;datos_adicionales&quot;: &quot;${DatosAdicionales}&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${DeudaTotal}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idServicio&quot;: &quot;MDAwODRAV1U=&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjAyNTI=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;empresa&quot;: &quot;U0FUIExpbWE=&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0055_1 - Mandar plata" enabled="false">
            <stringProp name="TestPlan.comments">ESC001: Mandar plata de BIM a BIM por p2p</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">${dataCSV}\parte_19.csv</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames"></stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor Login" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${destination_msisdn},destination_msisdn_enc)}
${__base64Encode(${msisdn_user},msisdnUserEncode)}
${__base64Encode(${transaction_amount},transaction_amount_enc)}
${__base64Encode(${destination_entity},destination_entity_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${destination_msisdn_enc}
${msisdnUserEncode}
${transaction_amount_enc}
${destination_entity_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_1: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;id_indigitall&quot;: &quot;fda8d529-b6c0-4046-8379-a1783e70beb9&quot;,&#xd;
	&quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenLogin" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">tokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_1: lf-mdw-mandar-plata-listar-favoritos-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/iu4q679j</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xNTk=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenLisFav" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenLisFav</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_1: lf-mdw-validar-usuario-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q446t9wm</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;:&quot;NTE5NjIzMzMzNzE=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMjc=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenLisFav}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenValUsuario" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenValUsuario</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_1: lf-mdw-consultar-info-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/6yajv8x5</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;: &quot;NTE5NjIzMzMzNzE=&quot;,&#xd;
    &quot;destination_entity&quot;: &quot;QklN&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origin_msisdn&quot;: &quot;${msisdnUserEncode}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMjk=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenValUsuario}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokeConsultarInfo" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokeConsultarInfo</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_1: lf-mdw-cotizacion-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/kle2gq5v</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;: &quot;NTE5NjIzMzMzNzE=&quot;,&#xd;
    &quot;amount&quot;: &quot;Mg==&quot;,&#xd;
    &quot;destination_entity&quot;: &quot;QklN&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origin_msisdn&quot;: &quot;${msisdnUserEncode}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMzA=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokeConsultarInfo}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokecotizacionP2p" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokecotizacionP2p</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_1: lf-mdw-mandar-plata-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/zqfqhep0</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;motivo&quot;: &quot;&quot;,&#xd;
    &quot;monto&quot;: &quot;Mg==&quot;,&#xd;
    &quot;entidad_destino&quot;: &quot;QklN&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdnUserEncode}&quot;,&#xd;
    &quot;destino&quot;: &quot;NTE5NjIzMzMzNzE=&quot;,&#xd;
    &quot;trx&quot;: &quot;TUFOREFSX1BMQVRB&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMw==</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokecotizacionP2p}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0055_2 - Mandar plata" enabled="false">
            <stringProp name="TestPlan.comments">ESC002: Mandar plata por QR</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">${dataCSV}\parte_20.csv</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames"></stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor Login" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${destination_msisdn},destination_msisdn_enc)}
${__base64Encode(${msisdn_user},msisdnUserEncode)}
${__base64Encode(${transaction_amount},transaction_amount_enc)}
${__base64Encode(${destination_entity},destination_entity_enc)}
${__base64Encode(${QRBim},QRBim_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${destination_msisdn_enc}
${msisdnUserEncode}
${transaction_amount_enc}
${destination_entity_enc}
${QRBim_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_2: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;id_indigitall&quot;: &quot;fda8d529-b6c0-4046-8379-a1783e70beb9&quot;,&#xd;
	&quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenLogin" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">tokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_2: lf-mdw-generateqr-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/obpc37jx</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;storelabel&quot;: &quot;&quot;,&#xd;
	&quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
	&quot;fechavencimiento&quot;: &quot;&quot;,&#xd;
	&quot;uri&quot;: &quot;&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenQR" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenQR</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp qr_bim_destino" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">qr_bim_destino</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;text&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_2: lf-mdw-inicio-pago-qr-otp-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/5t9hogps</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;qr&quot;: &quot;MDAwMjAxMDEwMjExMzc4NzAwMDhUUkFOU0ZFUjAxNjRjQjh2Wkp0dlBMMzQzbGxqY3RzU0xUbXBOcUNXdUErcUwrMUhmcXhsTW5FV1R2NUEyeTNEL0VoSGxBWmhOQT09MzcwM0JpbTUyMDQ1OTk5NTMwMzYwNDU4MDJQRTU5MDZCSU1FUk82MDEwTWlyYWZsb3JlczYyNjg5OTY0MTE0M2M1MTk0MjE1ZTkxNzM1ZTA0ZjQ1N2JkYzMwNzJjMTIzMWM1YzE3YzkyNjJmYWI4MzZjMGU4NzAyYzU1OTYzMDRGRjVG&quot;,&#xd;
    &quot;transaccion&quot;: &quot;Q09NUFJB&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xNTk=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenQR}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenInicioPagoQR" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenInicioPagoQR</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp  idinicioPagoQR" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">idinicioPagoQR</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;id_pdp&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp  alias1" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">alias1</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;alias&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_2: lf-mdw-cotizacion-pago-qr-estatico-opt-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/ocfsmk4k</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id_pdp&quot;: &quot;${idinicioPagoQR}&quot;,&#xd;
    &quot;monto&quot;: &quot;Mg==&quot;,&#xd;
    &quot;alias&quot;: &quot;${alias1}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;referencia&quot;: &quot;&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF81Mw==</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenInicioPagoQR}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenCotizacionEstatica" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenCotizacionEstatica</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp  alias2" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">alias2</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;alias&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_2: lf-mdw-pago-qr-dinamico-otp-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/d21aq169</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id_pdp&quot;: &quot;${idinicioPagoQR}&quot;,&#xd;
    &quot;alias&quot;: &quot;${alias2}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;referencia&quot;: &quot;&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF81NA==</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenCotizacionEstatica}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0055_3 - Mandar plata" enabled="false">
            <stringProp name="TestPlan.comments">ESC003: Compartir vaucher de mandar plata P2P con perfil de usuario bimer</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">${dataCSV}\parte_21.csv</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames"></stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor Login" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${destination_msisdn},destination_msisdn_enc)}
${__base64Encode(${msisdn_user},msisdnUserEncode)}
${__base64Encode(${transaction_amount},transaction_amount_enc)}
${__base64Encode(${destination_entity},destination_entity_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${destination_msisdn_enc}
${msisdnUserEncode}
${transaction_amount_enc}
${destination_entity_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_3: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;id_indigitall&quot;: &quot;fda8d529-b6c0-4046-8379-a1783e70beb9&quot;,&#xd;
	&quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenLogin" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">tokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_3: lf-mdw-mandar-plata-listar-favoritos-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/iu4q679j</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xNTk=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenLisFav" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenLisFav</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_3: lf-mdw-validar-usuario-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q446t9wm</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;:&quot;NTE5NjIzMzMzNzE=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMjc=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenLisFav}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenValUsuario" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenValUsuario</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_3: lf-mdw-consultar-info-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/6yajv8x5</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;: &quot;NTE5NjIzMzMzNzE=&quot;,&#xd;
    &quot;destination_entity&quot;: &quot;QklN&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origin_msisdn&quot;: &quot;${msisdnUserEncode}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMjk=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenValUsuario}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokeConsultarInfo" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokeConsultarInfo</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_3: lf-mdw-cotizacion-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/kle2gq5v</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;: &quot;NTE5NjIzMzMzNzE=&quot;,&#xd;
    &quot;amount&quot;: &quot;Mg==&quot;,&#xd;
    &quot;destination_entity&quot;: &quot;QklN&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origin_msisdn&quot;: &quot;${msisdnUserEncode}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMzA=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokeConsultarInfo}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokecotizacionP2p" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokecotizacionP2p</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_3: lf-mdw-mandar-plata-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/zqfqhep0</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;motivo&quot;: &quot;&quot;,&#xd;
    &quot;monto&quot;: &quot;Mg==&quot;,&#xd;
    &quot;entidad_destino&quot;: &quot;QklN&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdnUserEncode}&quot;,&#xd;
    &quot;destino&quot;: &quot;NTE5NjIzMzMzNzE=&quot;,&#xd;
    &quot;trx&quot;: &quot;TUFOREFSX1BMQVRB&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMw==</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokecotizacionP2p}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp id_tran Manda plata" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">id_tran</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;id_tran&quot;: &quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokemandaplataP2p" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokemandaplataP2p</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_3: lf-mdw-compartir-resultado-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/37k9g907</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;id_tran&quot;: &quot;${id_tran}&quot;,&#xd;
    &quot;msisdn_destino&quot;: &quot;NTE5NjIzMzMzNzE=&quot;,&#xd;
    &quot;msisdn_origen&quot;: &quot;${msisdnUserEncode}&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokemandaplataP2p}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0056_1 - Manda plata desde Bim hacia cualquier otra Billetera (No Bim)" enabled="false">
            <stringProp name="TestPlan.comments">ESC001: Mandar plata a (YAPE / PLIN) por P2P con perfil de usuario final o Bimer</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">${dataCSV}\parte_22.csv</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames"></stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor Login" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${destination_msisdn},destination_msisdn_enc)}
${__base64Encode(${msisdn_user},msisdnUserEncode)}
${__base64Encode(${transaction_amount},transaction_amount_enc)}
${__base64Encode(${destination_entity},destination_entity_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${destination_msisdn_enc}
${msisdnUserEncode}
${transaction_amount_enc}
${destination_entity_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_1: lf-mdw-login-app-bim">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;id_indigitall&quot;: &quot;fda8d529-b6c0-4046-8379-a1783e70beb9&quot;,&#xd;
	&quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenLogin" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">tokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname=" Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_1: lf-mdw-mandar-plata-listar-favoritos-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/iu4q679j</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xNTk=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenLisFav" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenLisFav</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_1: lf-mdw-validar-usuario-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q446t9wm</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;:&quot;NTE5OTIwNDU3NTI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMjc=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenLisFav}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenValUsuario" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenValUsuario</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_1: lf-mdw-inicio-flujo-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/uwzc65xt</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;:&quot;NTE5OTIwNDU3NTI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origin_msisdn&quot;: &quot;${msisdnUserEncode}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMjg=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenValUsuario}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenInicioFlujo" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenInicioFlujo</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp ext_session" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ext_session</stringProp>
                  <stringProp name="RegexExtractor.regex"> &quot;session&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_1: lf-mdw-consultar-info-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/6yajv8x5</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;: &quot;NTE5OTIwNDU3NTI=&quot;,&#xd;
    &quot;destination_entity&quot;: &quot;WUFQRQ==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origin_msisdn&quot;: &quot;${msisdnUserEncode}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMjk=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenInicioFlujo}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">session</stringProp>
                      <stringProp name="Header.value">${ext_session}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokeConsultarInfo" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokeConsultarInfo</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_1: lf-mdw-cotizacion-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/kle2gq5v</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;: &quot;NTE5OTIwNDU3NTI=&quot;,&#xd;
    &quot;amount&quot;: &quot;Mg==&quot;,&#xd;
    &quot;destination_entity&quot;: &quot;WUFQRQ==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origin_msisdn&quot;: &quot;${msisdnUserEncode}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMzA=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokeConsultarInfo}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">session</stringProp>
                      <stringProp name="Header.value">${ext_session}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokecotizacionP2p" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokecotizacionP2p</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_1: lf-mdw-mandar-plata-p2p-app-bim">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/zqfqhep0</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;motivo&quot;: &quot;&quot;,&#xd;
    &quot;monto&quot;: &quot;Mg==&quot;,&#xd;
    &quot;entidad_destino&quot;: &quot;WUFQRQ==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdnUserEncode}&quot;,&#xd;
    &quot;destino&quot;: &quot;NTE5OTIwNDU3NTI=&quot;,&#xd;
    &quot;trx&quot;: &quot;TUFOREFSX1BMQVRB&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMw==</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokecotizacionP2p}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">session</stringProp>
                      <stringProp name="Header.value">${ext_session}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0056_2 - Manda plata desde Bim hacia cualquier otra Billetera (No Bim)" enabled="false">
            <stringProp name="TestPlan.comments">ESC002: Compartir resultado de un mandar plata a (YAPE / PLIN) por P2P con perfil Bimer</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">${dataCSV}\parte_23.csv</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames"></stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor Login" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${destination_msisdn},destination_msisdn_enc)}
${__base64Encode(${msisdn_user},msisdnUserEncode)}
${__base64Encode(${destination_entity},destination_entity_enc)}
${__base64Encode(${transaction_amount},transaction_amount_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${destination_msisdn_enc}
${msisdnUserEncode}
${destination_entity_enc}
${transaction_amount_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_2: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;id_indigitall&quot;: &quot;fda8d529-b6c0-4046-8379-a1783e70beb9&quot;,&#xd;
	&quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenLogin" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">tokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_2: lf-mdw-mandar-plata-listar-favoritos-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/iu4q679j</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xNTk=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenLisFav" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenLisFav</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_2: lf-mdw-validar-usuario-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q446t9wm</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;:&quot;NTE5OTIwNDU3NTI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMjc=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenLisFav}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenValUsuario" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenValUsuario</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_2: lf-mdw-inicio-flujo-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/uwzc65xt</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;:&quot;NTE5OTIwNDU3NTI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origin_msisdn&quot;: &quot;${msisdnUserEncode}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMjg=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenValUsuario}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenInicioFlujo" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenInicioFlujo</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp ext_session" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ext_session</stringProp>
                  <stringProp name="RegexExtractor.regex"> &quot;session&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_2: lf-mdw-consultar-info-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/6yajv8x5</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;: &quot;NTE5OTIwNDU3NTI=&quot;,&#xd;
    &quot;destination_entity&quot;: &quot;WUFQRQ==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origin_msisdn&quot;: &quot;${msisdnUserEncode}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMjk=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenInicioFlujo}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">session</stringProp>
                      <stringProp name="Header.value">${ext_session}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokeConsultarInfo" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokeConsultarInfo</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_2: lf-mdw-cotizacion-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/kle2gq5v</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;: &quot;NTE5OTIwNDU3NTI=&quot;,&#xd;
    &quot;amount&quot;: &quot;Mg==&quot;,&#xd;
    &quot;destination_entity&quot;: &quot;WUFQRQ==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app}&quot;,&#xd;
    &quot;origin_msisdn&quot;: &quot;${msisdnUserEncode}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMzA=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokeConsultarInfo}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">session</stringProp>
                      <stringProp name="Header.value">${ext_session}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokecotizacionP2p" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokecotizacionP2p</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_2: lf-mdw-mandar-plata-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/zqfqhep0</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;motivo&quot;: &quot;&quot;,&#xd;
    &quot;monto&quot;: &quot;Mg==&quot;,&#xd;
    &quot;entidad_destino&quot;: &quot;WUFQRQ==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdnUserEncode}&quot;,&#xd;
    &quot;destino&quot;: &quot;NTE5OTIwNDU3NTI=&quot;,&#xd;
    &quot;trx&quot;: &quot;TUFOREFSX1BMQVRB&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMw==</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokecotizacionP2p}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">session</stringProp>
                      <stringProp name="Header.value">${ext_session}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokemandaplataP2p" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokemandaplataP2p</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp id_tran Manda plata" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">id_tran</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;id_tran&quot;: &quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_2: lf-mdw-compartir-resultado-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/37k9g907</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;id_tran&quot;: &quot;${id_tran}&quot;,&#xd;
    &quot;msisdn_destino&quot;: &quot;${msisdnUserEncode}&quot;,&#xd;
    &quot;msisdn_origen&quot;: &quot;${msisdnUserEncode}&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokemandaplataP2p}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0056_3 - Manda plata desde Bim hacia cualquier otra Billetera (No Bim)" enabled="false">
            <stringProp name="TestPlan.comments">ESC003: Mandar plata a (YAPE / PLIN) por QR con perfil de usuario final o Bimer</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">${dataCSV}\parte_24.csv</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames"></stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor Login" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${destination_msisdn},destination_msisdn_enc)}
${__base64Encode(${msisdn_user},msisdnUserEncode)}
${__base64Encode(${transaction_amount},transaction_amount_enc)}
${__base64Encode(${destination_entity},destination_entity_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${destination_msisdn_enc}
${msisdnUserEncode}
${transaction_amount_enc}
${destination_entity_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_3: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;id_indigitall&quot;: &quot;fda8d529-b6c0-4046-8379-a1783e70beb9&quot;,&#xd;
	&quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenLogin" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">tokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_3: lf-mdw-generateqr-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/obpc37jx</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;storelabel&quot;: &quot;&quot;,&#xd;
	&quot;traza_app&quot;: &quot;${traza_destination_generic}&quot;,&#xd;
	&quot;fechavencimiento&quot;: &quot;&quot;,&#xd;
	&quot;uri&quot;: &quot;&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenQR" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenQR</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp qr_bim_destino" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">qr_bim_destino</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;text&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_3: lf-mdw-inicio-pago-qr-otp-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/5t9hogps</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;qr&quot;: &quot;MDAwMjAxMDEwMjExMzkzMjgwYjBhYWU5Mjg0MDVjM2NhZGJjM2QwNmY5YmM4OWM1NTIwNDU2MTE1MzAzNjA0NTgwMlBFNTkwNllBUEVSTzYwMDRMaW1hNjMwNDc3Mzk=&quot;,&#xd;
    &quot;transaccion&quot;: &quot;Q09NUFJB&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xNTk=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenQR}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenInicioPagoQR" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenInicioPagoQR</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp  idinicioPagoQR" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">idinicioPagoQR</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;id_pdp&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp  Alias" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">alias</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;alias&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp  Sesion" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Session</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;session&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_3: lf-mdw-cotizacion-pago-qr-estatico-opt-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/ocfsmk4k</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id_pdp&quot;: &quot;${idinicioPagoQR}&quot;,&#xd;
    &quot;monto&quot;: &quot;Mg==&quot;,&#xd;
    &quot;alias&quot;: &quot;${alias}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;referencia&quot;: &quot;&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF81Mw==</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenInicioPagoQR}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">session</stringProp>
                      <stringProp name="Header.value">${Session}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenCotizacionEstatica" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenCotizacionEstatica</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_3: lf-mdw-pago-qr-dinamico-otp-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/d21aq169</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id_pdp&quot;: &quot;${idinicioPagoQR}&quot;,&#xd;
    &quot;alias&quot;: &quot;${alias}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;referencia&quot;: &quot;&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF81NA==</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenCotizacionEstatica}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                    <elementProp name="session" elementType="Header">
                      <stringProp name="Header.name">session</stringProp>
                      <stringProp name="Header.value">${Session}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0057_1 - Recibir plata desde cualquier Billetera hacia Bim" enabled="false">
            <stringProp name="TestPlan.comments">ESC001: Recibir plata por interoperabilidad (Yape o Plin) hacia mi billetera BIM.</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config">
              <stringProp name="filename">${dataCSV}\parte_25.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">// Obtener la fecha y hora actuales
def now = new Date()

// Crear un timestamp personalizado en formato &apos;yyyyMMddHHmmss&apos;
def customString = now.format(&apos;yyyyMMddHHmmss&apos;)

// Crear la cadena personalizada final (agregando &quot;PDP&quot; al principio)
def timeStamp = &quot;PDP&quot; + customString

// Almacenar la variable en JMeter
vars.put(&quot;time_stamp_external&quot;, timeStamp)

// Imprimir el valor de la variable en los logs para verificación
log.info(&quot;time_stamp_external: &quot; + vars.get(&quot;time_stamp_external&quot;))</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0057_1: lf-mdw-auth-token-external">
              <stringProp name="HTTPSampler.domain">niubimtest.mibim.pe</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/v1/login</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;AuthLogin&quot;: {&#xd;
        &quot;clientId&quot;: &quot;267a651cf985861bef49f5cc534f4014&quot;,&#xd;
        &quot;clientSecret&quot;: &quot;ec75ee00cf7d6c4a659cca70badab60c9938acf5aee1c18cf4c6c6e845d6fe88&quot;,&#xd;
        &quot;username&quot;: &quot;BCPPWVIRTUALNIUBIZ&quot;,&#xd;
        &quot;password&quot;: &quot;Pdp123456!&quot;&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">uOZhpv0bJm8LpAvN8Jc0H5qX4Eqo8lea1HV9FxJI</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp access_token_niubiz" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">access_token_niubiz</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;accessToken&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0057_1: lf-mdw-transfer-niubiz-external" enabled="true">
                <stringProp name="HTTPSampler.domain">${url_token_login_niubiz}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${Path_login_niubiz}/transfer</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;transfer&quot;: {&#xd;
        &quot;transactionAmount&quot;: &quot;10&quot;,&#xd;
        &quot;currencyIsoCode&quot;: &quot;PEN&quot;, &#xd;
        &quot;phoneNumber&quot;: &quot;0000051986144076&quot;,&#xd;
        &quot;externalTransacionIdentifier&quot;: &quot;${time_stamp_external}&quot;,&#xd;
        &quot;transactionIdentifier&quot;: &quot;${time_stamp_external}23bca33d38c449c09f0e5266f&quot;,&#xd;
        &quot;originWallet&quot;: &quot;YAPE&quot;,&#xd;
        &quot;originFirstName&quot;: &quot;MARCOS&quot;,&#xd;
        &quot;originLastName&quot;: &quot;FUNG&quot;,&#xd;
        &quot;transactionDateTime&quot;: &quot;2024-07-31 03:54:13&quot;,&#xd;
        &quot;transactionPlatform&quot;: {&#xd;
            &quot;entityCode&quot;: &quot;00&quot;,&#xd;
            &quot;entityDesc&quot;: &quot;Niubiz&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${virtual_interop_user}</stringProp>
                      <stringProp name="Authorization.password">${virtual_interop_password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${api-key-external-niubiz}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">AuthToken</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token_niubiz}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0057_3 - Recibir plata desde cualquier Billetera hacia Bim">
            <stringProp name="TestPlan.comments">ESC003: Realizar una reversa de una transferencia enviado por interoperabilidad (Yape o Plin).</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config">
              <stringProp name="filename">${dataCSV}\parte_10.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">// Obtener la fecha y hora actuales
def now = new Date()

// Crear un timestamp personalizado en formato &apos;yyyyMMddHHmmss&apos;
def customString = now.format(&apos;yyyyMMddHHmmss&apos;)

// Crear la cadena personalizada final (agregando &quot;PDP&quot; al principio)
def timeStamp = customString

// Almacenar la variable en JMeter
vars.put(&quot;time_stamp_external&quot;, timeStamp)

// Imprimir el valor de la variable en los logs para verificación
log.info(&quot;time_stamp_external: &quot; + vars.get(&quot;time_stamp_external&quot;))</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0057_3: lf-mdw-auth-token-external">
              <stringProp name="HTTPSampler.domain">${url_token_login_niubiz}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${Path_login_niubiz}/login</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;AuthLogin&quot;: {&#xd;
        &quot;clientId&quot;: &quot;${clientId}&quot;,&#xd;
        &quot;clientSecret&quot;: &quot;${clientSecret}&quot;,&#xd;
        &quot;username&quot;: &quot;${username}&quot;,&#xd;
        &quot;password&quot;: &quot;${password_niubiz}&quot;&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${api-key-external-niubiz}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp access_token_niubiz" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">access_token_niubiz</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;accessToken&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0057_3: lf-mdw-transfer-niubiz-external">
                <stringProp name="HTTPSampler.domain">${url_token_login_niubiz}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${Path_login_niubiz}/transfer</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;transfer&quot;: {&#xd;
        &quot;transactionAmount&quot;: &quot;1&quot;,&#xd;
        &quot;currencyIsoCode&quot;: &quot;PEN&quot;, &#xd;
        &quot;phoneNumber&quot;: &quot;${msisdn_user}&quot;,&#xd;
        &quot;externalTransacionIdentifier&quot;: &quot;${time_stamp_external}&quot;,&#xd;
        &quot;transactionIdentifier&quot;: &quot;PDP${msisdn_user}${time_stamp_external}23bca33d38c449c09f0e5266f&quot;,&#xd;
        &quot;originWallet&quot;: &quot;YAPE&quot;,&#xd;
        &quot;originFirstName&quot;: &quot;ROBERTO&quot;,&#xd;
        &quot;originLastName&quot;: &quot;PALACIOS&quot;,&#xd;
        &quot;transactionDateTime&quot;: &quot;2024-11-12 17:54:13&quot;,&#xd;
        &quot;transactionPlatform&quot;: {&#xd;
            &quot;entityCode&quot;: &quot;00&quot;,&#xd;
            &quot;entityDesc&quot;: &quot;Niubiz&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${virtual_interop_user}</stringProp>
                      <stringProp name="Authorization.password">${virtual_interop_password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${api-key-external-niubiz}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">AuthToken</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token_niubiz}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp externalTransacionIdentifier">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">externalTransacionIdentifier</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;transactionIdentifier&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0057_3: lf-mdw-reversal-niubiz-external">
                <stringProp name="HTTPSampler.domain">${url_token_login_niubiz}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${Path_login_niubiz}/reversal</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;reversal&quot;: {&#xd;
        &quot;transactionAmount&quot;: &quot;1&quot;,&#xd;
        &quot;currencyIsoCode&quot;: &quot;PEN&quot;,&#xd;
        &quot;phoneNumber&quot;: &quot;${msisdn_user}&quot;,&#xd;
        &quot;externalTransacionIdentifier&quot;: &quot;${externalTransacionIdentifier}&quot;,&#xd;
        &quot;transactionDateTime&quot;: &quot;2024-11-12 17:54:13&quot;,&#xd;
        &quot;originWallet&quot;: &quot;YAPE&quot;,&#xd;
        &quot;transactionPlatform&quot;: {&#xd;
            &quot;entityCode&quot;: &quot;00&quot;,&#xd;
            &quot;entityDesc&quot;: &quot;Niubiz&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer">
                  <stringProp name="ConstantTimer.delay">2000</stringProp>
                </ConstantTimer>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${virtual_interop_user}</stringProp>
                      <stringProp name="Authorization.password">${virtual_interop_password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${api-key-external-niubiz}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">AuthToken</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token_niubiz}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0058_1 - Manda plata desde Bim hacia cualquier asociada a la CCE" enabled="false">
            <stringProp name="TestPlan.comments">ESC001: Manda Plata de BIM a CCE</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">${dataCSV}\Data_F0058_1.csv</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <stringProp name="shareMode">shareMode.group</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames"></stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user},msisdnUserEncode)}
${__base64Encode(${destination_msisdn},destination_msisdn_enc)}
${__base64Encode(${destination_entity},destination_entity_enc)}
${__base64Encode(${transaction_amount},transaction_amount_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${msisdnUserEncode}
${destination_msisdn_enc}
${destination_entity_enc}
${transaction_amount_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor Login" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0058_1: lf-mdw-login-app-bim">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;id_indigitall&quot;: &quot;fda8d529-b6c0-4046-8379-a1783e70beb9&quot;,&#xd;
	&quot;traza_app&quot;: &quot;${traza_app}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenLogin" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">tokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0058_1: lf-mdw-mandar-plata-listar-favoritos-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/iu4q679j</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xNTk=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenLisFav" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenLisFav</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0058_1: lf-mdw-validar-usuario-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q446t9wm</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;:&quot;${destination_msisdn_enc}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMjc=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenLisFav}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenValUsuario" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenValUsuario</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0058_1: lf-mdw-inicio-flujo-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/uwzc65xt</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;:&quot;${destination_msisdn_enc}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app}&quot;,&#xd;
    &quot;origin_msisdn&quot;: &quot;${msisdnUserEncode}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMjg=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenValUsuario}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenInicioFlujo" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenInicioFlujo</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp ext_session" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ext_session</stringProp>
                  <stringProp name="RegexExtractor.regex"> &quot;session&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0058_1: lf-mdw-consultar-info-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/6yajv8x5</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;: &quot;${destination_msisdn_enc}&quot;,&#xd;
    &quot;destination_entity&quot;: &quot;${destination_entity_enc}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app}&quot;,&#xd;
    &quot;origin_msisdn&quot;: &quot;${msisdnUserEncode}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMjk=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenInicioFlujo}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">session</stringProp>
                      <stringProp name="Header.value">${ext_session}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokeConsultarInfo" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokeConsultarInfo</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0058_1: lf-mdw-cotizacion-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/kle2gq5v</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;: &quot;${destination_msisdn_enc}&quot;,&#xd;
    &quot;amount&quot;: &quot;${transaction_amount_enc}&quot;,&#xd;
    &quot;destination_entity&quot;: &quot;${destination_entity_enc}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app}&quot;,&#xd;
    &quot;origin_msisdn&quot;: &quot;${msisdnUserEncode}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMzA=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokeConsultarInfo}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">session</stringProp>
                      <stringProp name="Header.value">${ext_session}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokecotizacionP2p" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokecotizacionP2p</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0058_1: lf-mdw-mandar-plata-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/zqfqhep0</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;motivo&quot;: &quot;&quot;,&#xd;
    &quot;monto&quot;: &quot;${transaction_amount_enc}&quot;,&#xd;
    &quot;entidad_destino&quot;: &quot;${destination_entity_enc}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdnUserEncode}&quot;,&#xd;
    &quot;destino&quot;: &quot;${destination_msisdn_enc}&quot;,&#xd;
    &quot;trx&quot;: &quot;TUFOREFSX1BMQVRB&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMw==</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokecotizacionP2p}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">session</stringProp>
                      <stringProp name="Header.value">${ext_session}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0059_1 - Recibir plata desde cualquier entidad asociada a la CCE hacia Bim a través del Número de celular" enabled="false">
            <stringProp name="TestPlan.comments">ESC001: Recibir plata desde cualquier entidad asociada a la CCE hacia Bim a través del Número de celular</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config">
              <stringProp name="filename">${dataCSV}\parte_01.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.group</stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">// Obtener la fecha y hora actuales
def now = new Date()

// Crear un fecha personalizado en formato &apos;yyyyMMdd&apos;
def creationDate = now.format(&apos;yyyyMMdd&apos;)

// Crear un fecha personalizado en formato &apos;HHmmss&apos;
def creationTime = now.format(&apos;HHmmss&apos;) 

// Generar un número aleatorio de 28 cifras
def random28 = (1..28).collect { (Math.random() * 10).toInteger() }.join(&quot;&quot;)

// Crear numero de referencia en base a la fecha y hora concatenada
def retrievalReferenceNumber = creationDate[-4..-1]+creationTime+&quot;00&quot;

// Almacenar la variable fecha en JMeter
vars.put(&quot;cce_creationDate&quot;, creationDate)

// Almacenar la variable hora en JMeter
vars.put(&quot;cce_creationTime&quot;, creationTime)

// Guardar el número en una variable JMeter
vars.put(&quot;cce_instructionId&quot;, random28)

// Guardar Numero de referencia en Jmeter
vars.put(&quot;cce_retrievalReferenceNumber&quot;, retrievalReferenceNumber)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0059_1: lf-mdw-consulta-cuenta-interopcce">
              <stringProp name="HTTPSampler.domain">${URL_CCE}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_CCE}/consulta</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;debtorParticipantCode&quot;: &quot;0035&quot;,&#xd;
    &quot;creditorParticipantCode&quot;: &quot;0091&quot;,&#xd;
    &quot;creationDate&quot;: &quot;${cce_creationDate}&quot;,&#xd;
    &quot;creationTime&quot;: &quot;${cce_creationTime}&quot;,&#xd;
    &quot;terminalId&quot;: &quot;CCE20241&quot;,&#xd;
    &quot;retrievalReferenceNumber&quot;: &quot;060520053355&quot;,&#xd;
    &quot;trace&quot;: &quot;904001&quot;,&#xd;
    &quot;debtorName&quot;: &quot;&quot;,&#xd;
    &quot;debtorId&quot;: &quot;70347931&quot;,&#xd;
    &quot;debtorIdCode&quot;: &quot;2&quot;,&#xd;
    &quot;debtorPhoneNumber&quot;: &quot;0000000&quot;,&#xd;
    &quot;debtorAddressLine&quot;: &quot;&quot;,&#xd;
    &quot;debtorMobileNumber&quot;: &quot;000000000&quot;,&#xd;
    &quot;transactionType&quot;: &quot;320&quot;,&#xd;
    &quot;channel&quot;: &quot;52&quot;,&#xd;
    &quot;creditorAddressLine&quot;: &quot;&quot;,&#xd;
    &quot;creditorPhoneNumber&quot;: &quot;0000000&quot;,&#xd;
    &quot;creditorMobileNumber&quot;: &quot;${cce_creditorMobileNumber}&quot;,&#xd;
    &quot;creditorCCI&quot;: &quot;${cce_creditorCCI}&quot;,&#xd;
    &quot;creditorCreditCard&quot;: &quot;${cce_creditorCreditCard}&quot;,&#xd;
    &quot;debtorTypeOfPerson&quot;: &quot;N&quot;,&#xd;
    &quot;currency&quot;: &quot;604&quot;,&#xd;
    &quot;proxyType&quot;: &quot;${cce_proxyType}&quot;,&#xd;
    &quot;proxyValue&quot;: &quot;${cce_proxyValue}&quot;,&#xd;
    &quot;instructionId&quot;: &quot;${cce_instructionId}&quot;,&#xd;
    &quot;branchId&quot;: &quot;0035&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                <collectionProp name="AuthManager.auth_list">
                  <elementProp name="" elementType="Authorization">
                    <stringProp name="Authorization.url"></stringProp>
                    <stringProp name="Authorization.username">${Username_CCE}</stringProp>
                    <stringProp name="Authorization.password">${Password_CCE}</stringProp>
                    <stringProp name="Authorization.domain"></stringProp>
                    <stringProp name="Authorization.realm"></stringProp>
                  </elementProp>
                </collectionProp>
                <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
              </AuthManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-cce}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp creditorName" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cce_creditorName</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;creditorName&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp creditorId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cce_creditorId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;creditorId&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp creditorIdCode" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cce_creditorIdCode</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;creditorIdCode&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp instructionIdCons" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">instructionIdCons</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;instructionId&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp creationDateCons" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">creationDateCons</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;creationDate&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp creationTimeCons" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">creationTimeCons</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;creationTime&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0059_1: lf-mdw-orden-transferencia-interopcce">
                <stringProp name="HTTPSampler.domain">${URL_CCE}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_CCE}/transferencia</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;debtorParticipantCode&quot;: &quot;0035&quot;,&#xd;
	&quot;creditorParticipantCode&quot;: &quot;0091&quot;,&#xd;
	&quot;creationDate&quot;: &quot;${cce_creationDate}&quot;,&#xd;
	&quot;creationTime&quot;: &quot;${cce_creationTime}&quot;,&#xd;
	&quot;terminalId&quot;: &quot;CCE20241&quot;,&#xd;
	&quot;retrievalReferenceNumber&quot;: &quot;${cce_retrievalReferenceNumber}&quot;,&#xd;
	&quot;trace&quot;: &quot;030294&quot;,&#xd;
	&quot;channel&quot;: &quot;52&quot;,&#xd;
	&quot;amount&quot;: &quot;2&quot;,&#xd;
	&quot;currency&quot;: &quot;604&quot;,&#xd;
	&quot;transactionReference&quot;: &quot;NO REF&quot;,&#xd;
	&quot;referenceTransactionId&quot;: &quot;${cce_instructionId}&quot;,&#xd;
	&quot;transactionType&quot;: &quot;320&quot;,&#xd;
	&quot;feeAmount&quot;: &quot;1&quot;,&#xd;
	&quot;feeCode&quot;: &quot;0105&quot;,&#xd;
	&quot;applicationCriteria&quot;: &quot;M&quot;,&#xd;
	&quot;debtorTypeOfPerson&quot;: &quot;N&quot;,&#xd;
	&quot;debtorName&quot;: &quot;Liliana Andrea Pamela Fonseca De Las Casas&quot;,&#xd;
	&quot;debtorAddressLine&quot;: &quot;&quot;,&#xd;
	&quot;debtorIdCode&quot;: &quot;2&quot;,&#xd;
	&quot;debtorId&quot;: &quot;33919671&quot;,&#xd;
	&quot;debtorPhoneNumber&quot;: &quot;0000000&quot;,&#xd;
	&quot;debtorMobileNumber&quot;: &quot;000000000&quot;,&#xd;
	&quot;debtorCCI&quot;: &quot;09400141000061596252&quot;,&#xd;
	&quot;creditorName&quot;: &quot;${cce_creditorName}&quot;,&#xd;
	&quot;creditorAddressLine&quot;: &quot;&quot;,&#xd;
	&quot;creditorPhoneNumber&quot;: &quot;0000000&quot;,&#xd;
	&quot;creditorMobileNumber&quot;: &quot;${msisdn_user}&quot;,&#xd;
	&quot;creditorCCI&quot;: &quot;09108400465185300240&quot;,&#xd;
	&quot;creditorCreditCard&quot;: &quot;00000000000000000000&quot;,&#xd;
	&quot;sameCustomerFlag&quot;: &quot;O&quot;,&#xd;
	&quot;purposeCode&quot;: &quot;OTHR&quot;,&#xd;
	&quot;unstructuredInformation&quot;: null,&#xd;
	&quot;grossSalaryAmount&quot;: 0,&#xd;
	&quot;salaryPaymentIndicator&quot;: null,&#xd;
	&quot;monthOfThePayment&quot;: &quot;00&quot;,&#xd;
	&quot;yearOfThePayment&quot;: &quot;0000&quot;,&#xd;
	&quot;branchId&quot;: null,&#xd;
	&quot;settlementDate&quot;: &quot;20240606&quot;,&#xd;
	&quot;instructionId&quot;: &quot;${instructionIdCons}&quot;,&#xd;
	&quot;interbankSettlementAmount&quot;: 10&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${Username_CCE}</stringProp>
                      <stringProp name="Authorization.password">${Password_CCE}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-cce}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp instructionIdTrans" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">instructionIdTrans</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;instructionId&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp retrievalReferenceNumberTrans" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">retrievalReferenceNumberTrans</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;retrievalReferenceNumber&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0059_1: lf-mdw-confirmacion-abono-interopcce">
                <stringProp name="HTTPSampler.domain">${URL_CCE}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_CCE}/abono</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;debtorParticipantCode&quot;: &quot;0091&quot;,&#xd;
	&quot;creditorParticipantCode&quot;: &quot;0091&quot;,&#xd;
	&quot;responseDate&quot;: null,&#xd;
	&quot;responseTime&quot;: null,&#xd;
	&quot;terminalId&quot;: &quot;10103182&quot;,&#xd;
	&quot;retrievalReferenceNumber&quot;: &quot;${retrievalReferenceNumberTrans}&quot;,&#xd;
	&quot;trace&quot;: &quot;030294&quot;,&#xd;
	&quot;amount&quot;: ${cce_amount},&#xd;
	&quot;currency&quot;: &quot;604&quot;,&#xd;
	&quot;transactionReference&quot;: &quot;NO REF&quot;,&#xd;
	&quot;responseCode&quot;: &quot;00&quot;,&#xd;
	&quot;feeAmount&quot;: ${cce_feeAmount},&#xd;
	&quot;settlementDate&quot;: &quot;20240313&quot;,&#xd;
	&quot;transactionType&quot;: &quot;320&quot;,&#xd;
	&quot;debtorCCI&quot;: &quot;09400141000061596252&quot;,&#xd;
	&quot;creditorCCI&quot;: &quot;${cce_creditorCCI}&quot;,&#xd;
	&quot;creditorCreditCard&quot;: null,&#xd;
	&quot;sameCustomerFlag&quot;: &quot;O&quot;,&#xd;
	&quot;instructionId&quot;: &quot;${instructionIdTrans}&quot;,&#xd;
	&quot;creationDate&quot;: &quot;20240313&quot;,&#xd;
	&quot;creationTime&quot;: &quot;144220&quot;,&#xd;
	&quot;channel&quot;: &quot;52&quot;,&#xd;
	&quot;interbankSettlementAmount&quot;: 10&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${Username_CCE}</stringProp>
                      <stringProp name="Authorization.password">${Password_CCE}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-cce}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                  <stringProp name="ConstantTimer.delay">5000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0059_2 - Recibir plata desde cualquier entidad asociada a la CCE hacia Bim a través del Número de celular" enabled="false">
            <stringProp name="TestPlan.comments">ESC002: Notificar la recepción de la plata recibida desde desde cualquier entidad asociada a la CCE hacia Bim a través del Número de celular</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config">
              <stringProp name="filename">${dataCSV}\Data_F0059_2.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.group</stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">// Obtener la fecha y hora actuales
def now = new Date()

// Crear un fecha personalizado en formato &apos;yyyyMMdd&apos;
def creationDate = now.format(&apos;yyyyMMdd&apos;)

// Crear un fecha personalizado en formato &apos;HHmmss&apos;
def creationTime = now.format(&apos;HHmmss&apos;) 

// Generar un número aleatorio de 28 cifras
def random28 = (1..28).collect { (Math.random() * 10).toInteger() }.join(&quot;&quot;)

// Crear numero de referencia en base a la fecha y hora concatenada
def retrievalReferenceNumber = creationDate[-4..-1]+creationTime+&quot;00&quot;

// Almacenar la variable fecha en JMeter
vars.put(&quot;cce_creationDate&quot;, creationDate)

// Almacenar la variable hora en JMeter
vars.put(&quot;cce_creationTime&quot;, creationTime)

// Guardar el número en una variable JMeter
vars.put(&quot;cce_instructionId&quot;, random28)

// Guardar Numero de referencia en Jmeter
vars.put(&quot;cce_retrievalReferenceNumber&quot;, retrievalReferenceNumber)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0059_2: lf-mdw-consulta-cuenta-interopcce">
              <stringProp name="HTTPSampler.domain">${URL_CCE}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_CCE}/consulta</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;debtorParticipantCode&quot;: &quot;0035&quot;,&#xd;
    &quot;creditorParticipantCode&quot;: &quot;0091&quot;,&#xd;
    &quot;creationDate&quot;: &quot;${cce_creationDate}&quot;,&#xd;
    &quot;creationTime&quot;: &quot;${cce_creationTime}&quot;,&#xd;
    &quot;terminalId&quot;: &quot;CCE20241&quot;,&#xd;
    &quot;retrievalReferenceNumber&quot;: &quot;060520053355&quot;,&#xd;
    &quot;trace&quot;: &quot;904001&quot;,&#xd;
    &quot;debtorName&quot;: &quot;&quot;,&#xd;
    &quot;debtorId&quot;: &quot;70347931&quot;,&#xd;
    &quot;debtorIdCode&quot;: &quot;2&quot;,&#xd;
    &quot;debtorPhoneNumber&quot;: &quot;0000000&quot;,&#xd;
    &quot;debtorAddressLine&quot;: &quot;&quot;,&#xd;
    &quot;debtorMobileNumber&quot;: &quot;000000000&quot;,&#xd;
    &quot;transactionType&quot;: &quot;320&quot;,&#xd;
    &quot;channel&quot;: &quot;52&quot;,&#xd;
    &quot;creditorAddressLine&quot;: &quot;&quot;,&#xd;
    &quot;creditorPhoneNumber&quot;: &quot;0000000&quot;,&#xd;
    &quot;creditorMobileNumber&quot;: &quot;${cce_creditorMobileNumber}&quot;,&#xd;
    &quot;creditorCCI&quot;: &quot;${cce_creditorCCI}&quot;,&#xd;
    &quot;creditorCreditCard&quot;: &quot;${cce_creditorCreditCard}&quot;,&#xd;
    &quot;debtorTypeOfPerson&quot;: &quot;N&quot;,&#xd;
    &quot;currency&quot;: &quot;604&quot;,&#xd;
    &quot;proxyType&quot;: &quot;${cce_proxyType}&quot;,&#xd;
    &quot;proxyValue&quot;: &quot;${cce_proxyValue}&quot;,&#xd;
    &quot;instructionId&quot;: &quot;${cce_instructionId}&quot;,&#xd;
    &quot;branchId&quot;: &quot;0035&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                <collectionProp name="AuthManager.auth_list">
                  <elementProp name="" elementType="Authorization">
                    <stringProp name="Authorization.url"></stringProp>
                    <stringProp name="Authorization.username">${Username_CCE}</stringProp>
                    <stringProp name="Authorization.password">${Password_CCE}</stringProp>
                    <stringProp name="Authorization.domain"></stringProp>
                    <stringProp name="Authorization.realm"></stringProp>
                  </elementProp>
                </collectionProp>
                <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
              </AuthManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-cce}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp creditorName" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cce_creditorName</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;creditorName&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp creditorId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cce_creditorId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;creditorId&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp creditorIdCode" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cce_creditorIdCode</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;creditorIdCode&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp instructionIdCons" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">instructionIdCons</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;instructionId&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp creationDateCons" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">creationDateCons</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;creationDate&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp creationTimeCons" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">creationTimeCons</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;creationTime&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0059_2: lf-mdw-orden-transferencia-interopcce" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_CCE}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_CCE}/transferencia</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;debtorParticipantCode&quot;: &quot;0035&quot;,&#xd;
	&quot;creditorParticipantCode&quot;: &quot;0091&quot;,&#xd;
	&quot;creationDate&quot;: &quot;${creationDateCons}&quot;,&#xd;
	&quot;creationTime&quot;: &quot;${creationTimeCons}&quot;,&#xd;
	&quot;terminalId&quot;: &quot;202201&quot;,&#xd;
	&quot;retrievalReferenceNumber&quot;: &quot;${cce_retrievalReferenceNumber}&quot;,&#xd;
	&quot;trace&quot;: &quot;030294&quot;,&#xd;
	&quot;channel&quot;: &quot;52&quot;,&#xd;
	&quot;amount&quot;: ${cce_amount},&#xd;
	&quot;currency&quot;: &quot;604&quot;,&#xd;
	&quot;transactionReference&quot;: &quot;NO REF&quot;,&#xd;
	&quot;referenceTransactionId&quot;: &quot;${instructionIdCons}&quot;,&#xd;
	&quot;transactionType&quot;: &quot;320&quot;,&#xd;
	&quot;feeAmount&quot;: ${cce_feeAmount},&#xd;
	&quot;feeCode&quot;: &quot;0101&quot;,&#xd;
	&quot;applicationCriteria&quot;: &quot;M&quot;,&#xd;
	&quot;debtorTypeOfPerson&quot;: &quot;N&quot;,&#xd;
	&quot;debtorName&quot;: &quot;Liliana Andrea Pamela Fonseca De Las Casas&quot;,&#xd;
	&quot;debtorAddressLine&quot;: &quot;&quot;,&#xd;
	&quot;debtorIdCode&quot;: &quot;2&quot;,&#xd;
	&quot;debtorId&quot;: &quot;33919671&quot;,&#xd;
	&quot;debtorPhoneNumber&quot;: &quot;0000000&quot;,&#xd;
	&quot;debtorMobileNumber&quot;: &quot;000000000&quot;,&#xd;
	&quot;debtorCCI&quot;: &quot;09400141000061596252&quot;,&#xd;
	&quot;creditorName&quot;: &quot;${cce_creditorName}&quot;,&#xd;
	&quot;creditorAddressLine&quot;: &quot;&quot;,&#xd;
	&quot;creditorPhoneNumber&quot;: &quot;0000000&quot;,&#xd;
	&quot;creditorMobileNumber&quot;: &quot;${cce_creditorMobileNumber}&quot;,&#xd;
	&quot;creditorCCI&quot;: &quot;${cce_creditorCCI}&quot;,&#xd;
	&quot;creditorCreditCard&quot;: &quot;${cce_creditorCreditCard}&quot;,&#xd;
	&quot;sameCustomerFlag&quot;: &quot;O&quot;,&#xd;
	&quot;purposeCode&quot;: &quot;OTHR&quot;,&#xd;
	&quot;unstructuredInformation&quot;: null,&#xd;
	&quot;grossSalaryAmount&quot;: 0,&#xd;
	&quot;salaryPaymentIndicator&quot;: null,&#xd;
	&quot;monthOfThePayment&quot;: &quot;00&quot;,&#xd;
	&quot;yearOfThePayment&quot;: &quot;0000&quot;,&#xd;
	&quot;branchId&quot;: null,&#xd;
	&quot;settlementDate&quot;: &quot;20240606&quot;,&#xd;
	&quot;instructionId&quot;: &quot;${instructionIdCons}&quot;,&#xd;
	&quot;interbankSettlementAmount&quot;: 10&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${Username_CCE}</stringProp>
                      <stringProp name="Authorization.password">${Password_CCE}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-cce}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp instructionIdTrans" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">instructionIdTrans</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;instructionId&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp retrievalReferenceNumberTrans" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">retrievalReferenceNumberTrans</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;retrievalReferenceNumber&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0059_2: lf-mdw-confirmacion-abono-interopcce" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_CCE}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_CCE}/abono</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;debtorParticipantCode&quot;: &quot;0091&quot;,&#xd;
	&quot;creditorParticipantCode&quot;: &quot;0091&quot;,&#xd;
	&quot;responseDate&quot;: null,&#xd;
	&quot;responseTime&quot;: null,&#xd;
	&quot;terminalId&quot;: &quot;10103182&quot;,&#xd;
	&quot;retrievalReferenceNumber&quot;: &quot;${retrievalReferenceNumberTrans}&quot;,&#xd;
	&quot;trace&quot;: &quot;030294&quot;,&#xd;
	&quot;amount&quot;: ${cce_amount},&#xd;
	&quot;currency&quot;: &quot;604&quot;,&#xd;
	&quot;transactionReference&quot;: &quot;NO REF&quot;,&#xd;
	&quot;responseCode&quot;: &quot;00&quot;,&#xd;
	&quot;feeAmount&quot;: ${cce_feeAmount},&#xd;
	&quot;settlementDate&quot;: &quot;20240313&quot;,&#xd;
	&quot;transactionType&quot;: &quot;320&quot;,&#xd;
	&quot;debtorCCI&quot;: &quot;09400141000061596252&quot;,&#xd;
	&quot;creditorCCI&quot;: &quot;${cce_creditorCCI}&quot;,&#xd;
	&quot;creditorCreditCard&quot;: null,&#xd;
	&quot;sameCustomerFlag&quot;: &quot;O&quot;,&#xd;
	&quot;instructionId&quot;: &quot;${instructionIdTrans}&quot;,&#xd;
	&quot;creationDate&quot;: &quot;20240313&quot;,&#xd;
	&quot;creationTime&quot;: &quot;144220&quot;,&#xd;
	&quot;channel&quot;: &quot;52&quot;,&#xd;
	&quot;interbankSettlementAmount&quot;: 10&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${Username_CCE}</stringProp>
                      <stringProp name="Authorization.password">${Password_CCE}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-cce}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                  <stringProp name="ConstantTimer.delay">5000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">${__substring(${creationDateCons},4,8,transactionDateOriginal_CCE)}</stringProp>
                <stringProp name="RESPONSE_DATA">${transactionDateOriginal_CCE}</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0059_2: lf-mdw-notificacion-interopcce" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_CCE}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_CCE}/notificacion</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;codigoProceso&quot;: &quot;770000&quot;,&#xd;
	&quot;fechaHoraTransaccion&quot;: &quot;0115121231&quot;,&#xd;
	&quot;trace&quot;: &quot;030294&quot;,&#xd;
	&quot;binAdquirente&quot;: &quot;0091&quot;,&#xd;
	&quot;forwardInstitutionCode&quot;: &quot;0091&quot;,&#xd;
	&quot;terminalIDOriginal&quot;: &quot;010000&quot;,&#xd;
	&quot;traceOriginal&quot;: &quot;030294&quot;,&#xd;
	&quot;transactionDateOriginal&quot;: &quot;${transactionDateOriginal_CCE}&quot;,&#xd;
	&quot;transactionTimeOriginal&quot;: &quot;${creationTimeCons}&quot;,&#xd;
	&quot;binAdquirenteOriginal&quot;: &quot;0091&quot;,&#xd;
	&quot;forwardInstitucionCodeOriginal&quot;: &quot;0091&quot;,&#xd;
	&quot;responseCodeOriginal&quot;: &quot;00&quot;,&#xd;
	&quot;reasonCodeOriginal&quot;: &quot;BE15&quot;,&#xd;
	&quot;instructionId&quot;: &quot;${instructionIdTrans}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${Username_CCE}</stringProp>
                      <stringProp name="Authorization.password">${Password_CCE}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0059_3 - Recibir plata desde cualquier entidad asociada a la CCE hacia Bim a través del Número de celular" enabled="false">
            <stringProp name="TestPlan.comments">ESC003: Cancelar la recepción de la plata recibida desde desde cualquier entidad asociada a la CCE hacia Bim a través del Número de celular</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config">
              <stringProp name="filename">${dataCSV}\parte_03.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.group</stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">// Obtener la fecha y hora actuales
def now = new Date()

// Crear un fecha personalizado en formato &apos;yyyyMMdd&apos;
def creationDate = now.format(&apos;yyyyMMdd&apos;)

// Crear un fecha personalizado en formato &apos;HHmmss&apos;
def creationTime = now.format(&apos;HHmmss&apos;) 

// Generar un número aleatorio de 28 cifras
def random28 = (1..28).collect { (Math.random() * 10).toInteger() }.join(&quot;&quot;)

// Crear numero de referencia en base a la fecha y hora concatenada
def retrievalReferenceNumber = creationDate[-4..-1]+creationTime+&quot;00&quot;

// Almacenar la variable fecha en JMeter
vars.put(&quot;cce_creationDate&quot;, creationDate)

// Almacenar la variable hora en JMeter
vars.put(&quot;cce_creationTime&quot;, creationTime)

// Guardar el número en una variable JMeter
vars.put(&quot;cce_instructionId&quot;, random28)

// Guardar Numero de referencia en Jmeter
vars.put(&quot;cce_retrievalReferenceNumber&quot;, retrievalReferenceNumber)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0059_3: lf-mdw-consulta-cuenta-interopcce">
              <stringProp name="HTTPSampler.domain">${URL_CCE}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_CCE}/consulta</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;debtorParticipantCode&quot;: &quot;0035&quot;,&#xd;
    &quot;creditorParticipantCode&quot;: &quot;0091&quot;,&#xd;
    &quot;creationDate&quot;: &quot;${cce_creationDate}&quot;,&#xd;
    &quot;creationTime&quot;: &quot;${cce_creationTime}&quot;,&#xd;
    &quot;terminalId&quot;: &quot;CCE20241&quot;,&#xd;
    &quot;retrievalReferenceNumber&quot;: &quot;060520053355&quot;,&#xd;
    &quot;trace&quot;: &quot;904001&quot;,&#xd;
    &quot;debtorName&quot;: &quot;&quot;,&#xd;
    &quot;debtorId&quot;: &quot;70347931&quot;,&#xd;
    &quot;debtorIdCode&quot;: &quot;2&quot;,&#xd;
    &quot;debtorPhoneNumber&quot;: &quot;0000000&quot;,&#xd;
    &quot;debtorAddressLine&quot;: &quot;&quot;,&#xd;
    &quot;debtorMobileNumber&quot;: &quot;000000000&quot;,&#xd;
    &quot;transactionType&quot;: &quot;320&quot;,&#xd;
    &quot;channel&quot;: &quot;52&quot;,&#xd;
    &quot;creditorAddressLine&quot;: &quot;&quot;,&#xd;
    &quot;creditorPhoneNumber&quot;: &quot;0000000&quot;,&#xd;
    &quot;creditorMobileNumber&quot;: &quot;${cce_creditorMobileNumber}&quot;,&#xd;
    &quot;creditorCCI&quot;: &quot;${cce_creditorCCI}&quot;,&#xd;
    &quot;creditorCreditCard&quot;: &quot;${cce_creditorCreditCard}&quot;,&#xd;
    &quot;debtorTypeOfPerson&quot;: &quot;N&quot;,&#xd;
    &quot;currency&quot;: &quot;604&quot;,&#xd;
    &quot;proxyType&quot;: &quot;${cce_proxyType}&quot;,&#xd;
    &quot;proxyValue&quot;: &quot;${cce_proxyValue}&quot;,&#xd;
    &quot;instructionId&quot;: &quot;${cce_instructionId}&quot;,&#xd;
    &quot;branchId&quot;: &quot;0035&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                <collectionProp name="AuthManager.auth_list">
                  <elementProp name="" elementType="Authorization">
                    <stringProp name="Authorization.url"></stringProp>
                    <stringProp name="Authorization.username">${Username_CCE}</stringProp>
                    <stringProp name="Authorization.password">${Password_CCE}</stringProp>
                    <stringProp name="Authorization.domain"></stringProp>
                    <stringProp name="Authorization.realm"></stringProp>
                  </elementProp>
                </collectionProp>
                <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
              </AuthManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp creditorName" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cce_creditorName</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;creditorName&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp creditorId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cce_creditorId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;creditorId&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp creditorIdCode" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cce_creditorIdCode</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;creditorIdCode&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp instructionIdCons" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">instructionIdCons</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;instructionId&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp creationDateCons" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">creationDateCons</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;creationDate&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp creationTimeCons" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">creationTimeCons</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;creationTime&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0059_3: lf-mdw-orden-transferencia-interopcce">
                <stringProp name="HTTPSampler.domain">${URL_CCE}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_CCE}/transferencia</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;debtorParticipantCode&quot;: &quot;0035&quot;,&#xd;
	&quot;creditorParticipantCode&quot;: &quot;0091&quot;,&#xd;
	&quot;creationDate&quot;: &quot;${creationDateCons}&quot;,&#xd;
	&quot;creationTime&quot;: &quot;${creationTimeCons}&quot;,&#xd;
	&quot;terminalId&quot;: &quot;202201&quot;,&#xd;
	&quot;retrievalReferenceNumber&quot;: &quot;${cce_retrievalReferenceNumber}&quot;,&#xd;
	&quot;trace&quot;: &quot;030294&quot;,&#xd;
	&quot;channel&quot;: &quot;52&quot;,&#xd;
	&quot;amount&quot;: &quot;1&quot;,&#xd;
	&quot;currency&quot;: &quot;604&quot;,&#xd;
	&quot;transactionReference&quot;: &quot;NO REF&quot;,&#xd;
	&quot;referenceTransactionId&quot;: &quot;${instructionIdCons}&quot;,&#xd;
	&quot;transactionType&quot;: &quot;320&quot;,&#xd;
	&quot;feeAmount&quot;: &quot;1&quot;,&#xd;
	&quot;feeCode&quot;: &quot;0101&quot;,&#xd;
	&quot;applicationCriteria&quot;: &quot;M&quot;,&#xd;
	&quot;debtorTypeOfPerson&quot;: &quot;N&quot;,&#xd;
	&quot;debtorName&quot;: &quot;Liliana Andrea Pamela Fonseca De Las Casas&quot;,&#xd;
	&quot;debtorAddressLine&quot;: &quot;&quot;,&#xd;
	&quot;debtorIdCode&quot;: &quot;2&quot;,&#xd;
	&quot;debtorId&quot;: &quot;33919671&quot;,&#xd;
	&quot;debtorPhoneNumber&quot;: &quot;0000000&quot;,&#xd;
	&quot;debtorMobileNumber&quot;: &quot;000000000&quot;,&#xd;
	&quot;debtorCCI&quot;: &quot;09400141000061596252&quot;,&#xd;
	&quot;creditorName&quot;: &quot;${cce_creditorName}&quot;,&#xd;
	&quot;creditorAddressLine&quot;: &quot;&quot;,&#xd;
	&quot;creditorPhoneNumber&quot;: &quot;0000000&quot;,&#xd;
	&quot;creditorMobileNumber&quot;: &quot;${cce_creditorMobileNumber}&quot;,&#xd;
	&quot;creditorCCI&quot;: &quot;${cce_creditorCCI}&quot;,&#xd;
	&quot;creditorCreditCard&quot;: &quot;${cce_creditorCreditCard}&quot;,&#xd;
	&quot;sameCustomerFlag&quot;: &quot;O&quot;,&#xd;
	&quot;purposeCode&quot;: &quot;OTHR&quot;,&#xd;
	&quot;unstructuredInformation&quot;: null,&#xd;
	&quot;grossSalaryAmount&quot;: 0,&#xd;
	&quot;salaryPaymentIndicator&quot;: null,&#xd;
	&quot;monthOfThePayment&quot;: &quot;00&quot;,&#xd;
	&quot;yearOfThePayment&quot;: &quot;0000&quot;,&#xd;
	&quot;branchId&quot;: null,&#xd;
	&quot;settlementDate&quot;: &quot;20240606&quot;,&#xd;
	&quot;instructionId&quot;: &quot;${instructionIdCons}&quot;,&#xd;
	&quot;interbankSettlementAmount&quot;: 10&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${Username_CCE}</stringProp>
                      <stringProp name="Authorization.password">${Password_CCE}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-cce}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp instructionIdTrans" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">instructionIdTrans</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;instructionId&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp retrievalReferenceNumberTrans" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">retrievalReferenceNumberTrans</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;retrievalReferenceNumber&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0059_3: lf-mdw-confirmacion-abono-interopcce" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_CCE}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_CCE}/abono</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;debtorParticipantCode&quot;: &quot;0091&quot;,&#xd;
	&quot;creditorParticipantCode&quot;: &quot;0091&quot;,&#xd;
	&quot;responseDate&quot;: null,&#xd;
	&quot;responseTime&quot;: null,&#xd;
	&quot;terminalId&quot;: &quot;10103182&quot;,&#xd;
	&quot;retrievalReferenceNumber&quot;: &quot;${retrievalReferenceNumberTrans}&quot;,&#xd;
	&quot;trace&quot;: &quot;030294&quot;,&#xd;
	&quot;amount&quot;: ${cce_amount},&#xd;
	&quot;currency&quot;: &quot;604&quot;,&#xd;
	&quot;transactionReference&quot;: &quot;NO REF&quot;,&#xd;
	&quot;responseCode&quot;: &quot;00&quot;,&#xd;
	&quot;feeAmount&quot;: ${cce_feeAmount},&#xd;
	&quot;settlementDate&quot;: &quot;20240313&quot;,&#xd;
	&quot;transactionType&quot;: &quot;320&quot;,&#xd;
	&quot;debtorCCI&quot;: &quot;09400141000061596252&quot;,&#xd;
	&quot;creditorCCI&quot;: &quot;${cce_creditorCCI}&quot;,&#xd;
	&quot;creditorCreditCard&quot;: null,&#xd;
	&quot;sameCustomerFlag&quot;: &quot;O&quot;,&#xd;
	&quot;instructionId&quot;: &quot;${instructionIdTrans}&quot;,&#xd;
	&quot;creationDate&quot;: &quot;20240313&quot;,&#xd;
	&quot;creationTime&quot;: &quot;144220&quot;,&#xd;
	&quot;channel&quot;: &quot;52&quot;,&#xd;
	&quot;interbankSettlementAmount&quot;: 10&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${Username_CCE}</stringProp>
                      <stringProp name="Authorization.password">${Password_CCE}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-cce}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0059_3: lf-mdw-cancelacion-orden-transferencia-interopcce" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_CCE}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_CCE}/cancelacion</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;creditorParticipantCode&quot;: &quot;0091&quot;,&#xd;
	&quot;creationDate&quot;: &quot;${creationDateCons}&quot;,&#xd;
	&quot;creationTime&quot;: &quot;${creationTimeCons}&quot;,&#xd;
	&quot;currency&quot;: &quot;604&quot;,&#xd;
	&quot;transactionReference&quot;: &quot;NO REF&quot;,&#xd;
	&quot;referenceTransactionID&quot;: &quot;${instructionIdTrans}&quot;,&#xd;
	&quot;instructionId&quot;: &quot;${instructionIdTrans}&quot;,&#xd;
	&quot;branchId&quot;: null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${Username_CCE}</stringProp>
                      <stringProp name="Authorization.password">${Password_CCE}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-cce}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">${ReportResult}\REPORTE_GENERAL.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">${ReportResult}\REQUESTRESPONSE.xml</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="testName" elementType="Argument">
                <stringProp name="Argument.name">testName</stringProp>
                <stringProp name="Argument.value">BIM</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="nodeName" elementType="Argument">
                <stringProp name="Argument.name">nodeName</stringProp>
                <stringProp name="Argument.value">Jmeter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="runId" elementType="Argument">
                <stringProp name="Argument.name">runId</stringProp>
                <stringProp name="Argument.value">DryRun</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBURL" elementType="Argument">
                <stringProp name="Argument.name">influxDBURL</stringProp>
                <stringProp name="Argument.value">https://us-east-1-1.aws.cloud2.influxdata.com/</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBToken" elementType="Argument">
                <stringProp name="Argument.name">influxDBToken</stringProp>
                <stringProp name="Argument.value">ia1Re8w3kKknIUc9AcH2Vm1osN-SD2BlTGhiGxWlgrdoqr8_gUoFR4-x7k8uxraKIoFMdj1hHK1nZvFDFoOAPA==</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBOrganization" elementType="Argument">
                <stringProp name="Argument.name">influxDBOrganization</stringProp>
                <stringProp name="Argument.value">BIM</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBBucket" elementType="Argument">
                <stringProp name="Argument.name">influxDBBucket</stringProp>
                <stringProp name="Argument.value">BIMLOADTEST</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBFlushInterval" elementType="Argument">
                <stringProp name="Argument.name">influxDBFlushInterval</stringProp>
                <stringProp name="Argument.value">4000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBMaxBatchSize" elementType="Argument">
                <stringProp name="Argument.name">influxDBMaxBatchSize</stringProp>
                <stringProp name="Argument.value">2000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBThresholdError" elementType="Argument">
                <stringProp name="Argument.name">influxDBThresholdError</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="samplersList" elementType="Argument">
                <stringProp name="Argument.name">samplersList</stringProp>
                <stringProp name="Argument.value">.*</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="useRegexForSamplerList" elementType="Argument">
                <stringProp name="Argument.name">useRegexForSamplerList</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="recordSubSamples" elementType="Argument">
                <stringProp name="Argument.name">recordSubSamples</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="saveResponseBodyOfFailures" elementType="Argument">
                <stringProp name="Argument.name">saveResponseBodyOfFailures</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="responseBodyLength" elementType="Argument">
                <stringProp name="Argument.name">responseBodyLength</stringProp>
                <stringProp name="Argument.value">2000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">io.github.mderevyankoaqa.influxdb2.visualizer.InfluxDatabaseBackendListenerClient</stringProp>
        </BackendListener>
        <hashTree/>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="jp@gc - Ultimate Thread Group" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="2099691534">
            <stringProp name="1784">80</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="50547">300</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-1383010376">
            <stringProp name="1815">90</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="51663">450</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-1743182121">
            <stringProp name="48625">100</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="53430">600</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="RANDOM ORDER CONTROLLER - GRUPO1"/>
        <hashTree>
          <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="F0032 - Poner Plata"/>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_01.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user},msisdn_Encode)}
${__base64Encode(${msisdn_user}:${password},AuthorizationEncode)}</stringProp>
              <stringProp name="RESPONSE_DATA">${msisdn_Encode}
${AuthorizationEncode}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">// Obtener la fecha y hora actuales
def now = new Date()

// Crear un timestamp personalizado en formato &apos;yyyyMMddHHmm&apos;
def customString = now.format(&apos;yyyyMMddHHmmss&apos;)

// Crear la cadena personalizada final (agregando &quot;PDP&quot; al principio)
def transaction = &quot;PDP&quot; + customString + vars.get(&quot;msisdn_user&quot;)

// Almacenar la variable en JMeter
vars.put(&quot;transaction_id&quot;, transaction)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0032: Cashin Compartamos" enabled="true">
              <stringProp name="HTTPSampler.domain">prd.pdp.internal</stringProp>
              <stringProp name="HTTPSampler.port">2324</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.path">/prod/fcompartamos_app/cashin</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;sendingfri&quot;: &quot;COMPWVIRTUAL163&quot;,&#xd;
    &quot;receivingfri&quot;: &quot;${msisdn_user}&quot;,&#xd;
    &quot;amount&quot;: &quot;10.00&quot;,&#xd;
    &quot;external_id&quot;: &quot;${transaction_id}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic Q09NUFdWSVJUVUFMMTYzOkRldkBVQVQjMjUwMTEy</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0035_3 - Sacar Plata (EC2 e Integración Directa)" enabled="false">
            <stringProp name="TestPlan.comments">ESC003: Retiro de plata por oficina Compartamos desde BIM</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\Data.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.group</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user},msisdn_Encode)}
${__base64Encode(${msisdn_user}:${password},AuthorizationEncode)}</stringProp>
              <stringProp name="RESPONSE_DATA">${msisdn_Encode}
${AuthorizationEncode}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0035_3: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0035_3: lf-mdw-entidadessacaplataexterno-entidadessacaplataexterno" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/a3zc2u86</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;msisdn&quot;: &quot;${msisdn_Encode}&quot;,&#xd;
    &quot;emisor&quot;: &quot;RkNPTVBBUlRBTU9T&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Basic ${AuthorizationEncode}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_Encode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token SacaPlata" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenSacaPlata</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0035_3: lf-mdw-sacar-plata-otp-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/7exhuo6v</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${RkNPTVBBUlRBTU9T}&quot;,&#xd;
    &quot;amount&quot;: &quot;MjA=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenSacaPlata}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_Encode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp OTP" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">otp</stringProp>
                  <stringProp name="RegexExtractor.regex"> &quot;otp&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesDecode" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">${__base64Decode(${otp},otpDecode)}</stringProp>
                <stringProp name="RESPONSE_DATA">${otpDecode}</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Obtener la fecha y hora actuales
def now = new Date()

// Crear un timestamp personalizado en formato &apos;yyyyMMddHHmm&apos;
def customString = now.format(&apos;yyyyMMddHHmm&apos;)

// Crear la cadena personalizada final (agregando &quot;PDP&quot; al principio)
def transaction = &quot;PDP&quot; + customString

// Almacenar la variable en JMeter
vars.put(&quot;transaction_id&quot;, transaction)</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0035_3: Cashout Compartamos" enabled="true">
                <stringProp name="TestPlan.comments">Log: log_group_fcompartamos_co_test</stringProp>
                <stringProp name="HTTPSampler.domain">prd.pdp.internal</stringProp>
                <stringProp name="HTTPSampler.port">2325</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_COMPARTAMOS_ATM}/atmcashout</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;msisdn&quot;: &quot;${msisdn_user}&quot;,&#xd;
    &quot;otp&quot;: &quot;${otpDecode}&quot;,&#xd;
    &quot;amount&quot;: &quot;20&quot;, &#xd;
    &quot;external_transaction_id&quot;: &quot;${transaction_id}&quot; &#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Basic ${AuthorizationCashOutCF}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0038_1 - Pagar Servicios - Telefonía" enabled="true">
            <stringProp name="TestPlan.comments">ESC001: Pagar servicios por Recaudador WU</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_02.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.group</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user},msisdn_user_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${msisdn_user_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_1: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_1: lf-mdw-listar-categorias-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/aw68br9z</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;perfil_user&quot;:&quot;QklNRVI=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Categoria" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenCategoria</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_1: lf-mdw-listar-empresas-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/7mefml3g</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;categoria&quot;: &quot;VGVsZWZvbsOtYQ==&quot;,&#xd;
    &quot;pagina_actual&quot;: &quot;MQ==&quot;,&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTU=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;QklNRVI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenCategoria}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Empresa" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenEmpresa</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_1: lf-mdw-listar-empresas-buscador-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/x8asmm0u</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTU=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;QklNRVI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;empresa&quot;: &quot;TW92aXN0YXI=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_1: lf-mdw-consulta-deuda-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q0iu80rb</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;param_ordinal&quot;: &quot;MQ==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;idCliente&quot;: &quot;MDAwMzJAV1U=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjAwNTk=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;,&#xd;
    &quot;param_valor&quot;: &quot;MzI2NTk2&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp deuda_total" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">deuda_total</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;deuda_total&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp datos_adicionales" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">datos_adicionales</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;datos_adicionales&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaDeuda" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaDeuda</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_1: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${deuda_total}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaDeuda}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_1: lf-mdw-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/1qw2q7hh</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;servicio&quot;: &quot;Rmlqbw==&quot;,&#xd;
    &quot;idTransaccionPDP&quot;: &quot;&quot;,&#xd;
    &quot;param_valor&quot;: &quot;MzI2NTk2&quot;,&#xd;
    &quot;param_ordinal&quot;: &quot;MA==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;datos_adicionales&quot;: &quot;${datos_adicionales}&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${deuda_total}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idServicio&quot;: &quot;MDAwMzJAV1U=&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjAwNTk=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;empresa&quot;: &quot;TW92aXN0YXI=&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Pago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0038_2 - Pagar Servicios - Telefonía" enabled="true">
            <stringProp name="TestPlan.comments">ESC002: Pagar servicios por Recaudador Claro</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_03.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user},msisdn_user_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${msisdn_user_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_2: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_2: lf-mdw-listar-categorias-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/aw68br9z</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;perfil_user&quot;:&quot;QklNRVI=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Categoria" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenCategoria</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_2: lf-mdw-listar-empresas-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/7mefml3g</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;categoria&quot;: &quot;VGVsZWZvbsOtYQ==&quot;,&#xd;
    &quot;pagina_actual&quot;: &quot;MQ==&quot;,&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTU=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;QklNRVI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenCategoria}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Empresa" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenEmpresa</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_2: lf-mdw-consulta-deuda-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q0iu80rb</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;param_ordinal&quot;: &quot;VEVMRQ==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;idCliente&quot;: &quot;MDAwMDAyQENMQVJP&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idProducto&quot;: &quot;UkVD&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QGNsYXJv&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;,&#xd;
    &quot;param_valor&quot;: &quot;OTU3MTM1NDQ1&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp deuda_total" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">deuda_total</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;deuda_total&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp datos_adicionales" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">datos_adicionales</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;datos_adicionales&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaDeuda" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaDeuda</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp deudas" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">deudas</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;deudas&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesDecode" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">${__base64Decode(${deudas},deudasDecode)}</stringProp>
                <stringProp name="RESPONSE_DATA">${__base64Decode(${deudas},deudasDecode)}</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp idTransaccion" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">idTransaccion</stringProp>
                  <stringProp name="RegexExtractor.regex">&apos;idTransaccion&apos;: &apos;(.+?)&apos;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">${__base64Encode(${idTransaccion}@claro,idTransaccionEncode)}</stringProp>
                <stringProp name="RESPONSE_DATA">${idTransaccionEncode}</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_2: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${deuda_total}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaDeuda}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_2: lf-mdw-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/1qw2q7hh</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;servicio&quot;: &quot;TsO6bWVybyBkZSBjZWx1bGFyIC8gRmlqbw==&quot;,&#xd;
    &quot;idTransaccionPDP&quot;: &quot;${idTransaccionEncode}&quot;,&#xd;
    &quot;param_valor&quot;: &quot;OTU3MTM1NDQ1&quot;,&#xd;
    &quot;param_ordinal&quot;: &quot;MA==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;datos_adicionales&quot;: &quot;${datos_adicionales}&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${deuda_total}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idServicio&quot;: &quot;MDAwMDAyQENMQVJP&quot;,&#xd;
    &quot;idProducto&quot;: &quot;UkVD&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QGNsYXJv&quot;,&#xd;
    &quot;empresa&quot;: &quot;Q2xhcm8=&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Pago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0038_3 - Pagar Servicios - Telefonía" enabled="true">
            <stringProp name="TestPlan.comments">ESC003: Pagar servicios por Recaudador Bitel</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_04.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user},msisdn_user_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${msisdn_user_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_3: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_3: lf-mdw-listar-categorias-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/aw68br9z</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;perfil_user&quot;:&quot;QklNRVI=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Categoria" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenCategoria</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_3: lf-mdw-listar-empresas-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/7mefml3g</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;categoria&quot;: &quot;VGVsZWZvbsOtYQ==&quot;,&#xd;
    &quot;pagina_actual&quot;: &quot;MQ==&quot;,&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTU=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;QklNRVI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenCategoria}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Empresa" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenEmpresa</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_3: lf-mdw-consulta-deuda-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q0iu80rb</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;param_ordinal&quot;: &quot;MQ==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;idCliente&quot;: &quot;MDAwMDAyQEJJVEVMU1A=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idProducto&quot;: &quot;MQ==&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QGJpdGVs&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;,&#xd;
    &quot;param_valor&quot;: &quot;OTg2MTQ0MDc2&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="false">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp deuda_total" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">deuda_total</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;deuda_total&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp datos_adicionales" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">datos_adicionales</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;datos_adicionales&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp deudas" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">deudas</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;deudas&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaDeuda" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaDeuda</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesDecode" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">${__base64Decode(${deudas},deudasDecode)}</stringProp>
                <stringProp name="RESPONSE_DATA">${__base64Decode(${deudas},deudasDecode)}</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp idTransaccion" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">idTransaccion</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;idTransaccion&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">${__base64Encode(${idTransaccion}@bitel,idTransaccionEncode)}</stringProp>
                <stringProp name="RESPONSE_DATA">${__base64Encode(${idTransaccion}@bitel,idTransaccionEncode)}</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_3: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${deuda_total}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaDeuda}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_3: lf-mdw-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/1qw2q7hh</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;servicio&quot;: &quot;UG9zdHBhZ28=&quot;,&#xd;
    &quot;idTransaccionPDP&quot;: &quot;${idTransaccionEncode}&quot;,&#xd;
    &quot;param_valor&quot;: &quot;OTg2MTQ0MDc2&quot;,&#xd;
    &quot;param_ordinal&quot;: &quot;MA==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;datos_adicionales&quot;: &quot;${datos_adicionales}&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${deuda_total}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idServicio&quot;: &quot;MDAwMDAyQEJJVEVMU1A=&quot;,&#xd;
    &quot;idProducto&quot;: &quot;MQ==&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QGJpdGVs&quot;,&#xd;
    &quot;empresa&quot;: &quot;Qml0ZWw=&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Pago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0038_4 - Pagar Servicios - Telefonía" enabled="true">
            <stringProp name="TestPlan.comments">ESC004: Pagar por servicios por Recaudador Azulito</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_05.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user},msisdn_user_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${msisdn_user_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_4: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_4: lf-mdw-listar-categorias-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/aw68br9z</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;perfil_user&quot;:&quot;QklNRVI=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Categoria" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenCategoria</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_4: lf-mdw-listar-empresas-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/7mefml3g</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;categoria&quot;: &quot;VGVsZWZvbsOtYQ==&quot;,&#xd;
    &quot;pagina_actual&quot;: &quot;MQ==&quot;,&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTU=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;QklNRVI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenCategoria}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Empresa" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenEmpresa</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_4: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;NS4wMA==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0038_4: lf-mdw-pago-servicios-offline-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dyhrsv9l</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;monto&quot;: &quot;NS4wMA==&quot;,&#xd;
    &quot;codigo_pago&quot;: &quot;MTIzNDU2Nw==&quot;,&#xd;
    &quot;subtipo&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QGF6dWxpdG9fcGRw&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b2ZmbGluZQ==&quot;,&#xd;
    &quot;idservicio&quot;: &quot;MDAwMDAyQEFaVUxJVE8=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0039_1 - Paga Compartamos" enabled="true">
            <stringProp name="TestPlan.comments">ESC001: Depositar ahorro grupal</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_06.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.Base64

def numero = vars.get(&quot;msisdn_user&quot;) 
def contrasena = vars.get(&quot;password&quot;) 
def credencial = numero + &quot;:&quot; + contrasena
def encodeCredentials = &quot;Basic &quot; + Base64.getEncoder().encodeToString(credencial.getBytes(&quot;UTF-8&quot;))
vars.put(&quot;Authorization&quot;, encodeCredentials)

</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user},msisdnUserEncode)}</stringProp>
              <stringProp name="RESPONSE_DATA">${msisdnUserEncode}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_1: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_1: lf-mdw-consulta-inicio-pago-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/eybieuin</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;traza_app&quot;:&quot;${traza_app_generic}&quot;,&#xd;
	&quot;perfil_user&quot;:&quot;VVNVQVJJT19GSU5BTA==&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${Authorization}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Consulta Inicio" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaInicio</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_1: lf-mdw-consulta-ahorro-grupal-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/2ihzu8hc</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;traza_app&quot;:&quot;${traza_app}&quot;,&#xd;
&quot;numero_cuenta&quot;:&quot;MDA0NjI5NzgwMDAwMDE=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${Authorization}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaInicio}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Consulta Ahorro" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaAhorro</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_1: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdnUserEncode}&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;bWVyY2hhbnRwYXltZW50&quot;,&#xd;
    &quot;monto&quot;: &quot;MQ==&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QGZjb21wYXJ0YW1vcw==&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${Authorization}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaAhorro}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_1: lf-mdw-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/1qw2q7hh</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdnUserEncode}&quot;,&#xd;
    &quot;idTransaccionPDP&quot;: &quot;&quot;,&#xd;
    &quot;param_valor&quot;: &quot;MDA0NjI5NzgwMDAwMDE=&quot;,&#xd;
    &quot;param_ordinal&quot;: &quot;MQ==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;datos_adicionales&quot;: &quot;&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MQ==&quot;, &#xd;
    &quot;tipo_trx&quot;: &quot;bWVyY2hhbnRwYXltZW50&quot;,&#xd;
    &quot;monto&quot;: &quot;MQ==&quot;,&#xd;
    &quot;idServicio&quot;: &quot;MDAwMDAxQEZDT01QQVJUQU1PUw==&quot;,&#xd;
    &quot;idProducto&quot;: &quot;MQ==&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QGZjb21wYXJ0YW1vcw==&quot;,&#xd;
    &quot;empresa&quot;: &quot;Q29tcGFydGFtb3MgRmluYW5jaWVyYQ==&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;,&#xd;
    &quot;servicio&quot;:&quot;RGVwb3NpdGEgdHUgYWhvcnJv&quot;&#xd;
&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0039_2 - Paga Compartamos" enabled="true">
            <stringProp name="TestPlan.comments">ESC002: Recaudación grupal con código</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_07.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.Base64

def numero = vars.get(&quot;msisdn_user&quot;) 
def contrasena = vars.get(&quot;password&quot;) 
def credencial = numero + &quot;:&quot; + contrasena
def encodeCredentials = &quot;Basic &quot; + Base64.getEncoder().encodeToString(credencial.getBytes(&quot;UTF-8&quot;))
vars.put(&quot;Authorization&quot;, encodeCredentials)

</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user},msisdnUserEncode)}</stringProp>
              <stringProp name="RESPONSE_DATA">${msisdnUserEncode}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_2: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_2: lf-mdw-consulta-inicio-pago-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/eybieuin</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;traza_app&quot;:&quot;${traza_app_generic}&quot;,&#xd;
 &quot;perfil_user&quot;:&quot;VVNVQVJJT19GSU5BTA==&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${Authorization}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Consulta Inicio" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaInicio</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_2: lf-mdw-consulta-credito-grupal-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/jxwgk0rv</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdnUserEncode}&quot;,&#xd;
    &quot;codigo_credito&quot;: &quot;MTUwMzQ5MDM=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${Authorization}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaInicio}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">datos_adicionales</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;datos_adicionales&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">import java.util.Base64
import groovy.json.JsonSlurper

// Obtener el valor capturado por el extractor
def encodedData = vars.get(&quot;datos_adicionales&quot;)

// Decodificar Base64
def decodedData = new String(Base64.getDecoder().decode(encodedData), &quot;UTF-8&quot;)

// Reemplazar las comillas simples por comillas dobles y &quot;None&quot; por &quot;null&quot;
decodedData = decodedData.replace(&quot;&apos;&quot;, &quot;\&quot;&quot;).replace(&quot;None&quot;, &quot;null&quot;)

// Guardar el JSON decodificado en una nueva variable
vars.put(&quot;decodedData&quot;, decodedData)
log.info(&quot;-------------MENSAJE---------------&quot; + decodedData)

// La cadena JSON extraída previamente
def jsonString = vars.get(&quot;decodedData&quot;) // Reemplaza con el nombre de tu variable

// Parsear la cadena como JSON
def jsonParser = new JsonSlurper()
def jsonObject = jsonParser.parseText(jsonString)

// Extraer el valor de &apos;pnMorCuo&apos;
def pnMorCuo = jsonObject.paCuota[0].pnMorCuo
def pnTotCuo = jsonObject.paCuota[0].pnTotCuo
def idTransaccion = jsonObject.paCuota[0].idTransaccion

// Guardar el valor en una variable de JMeter
vars.put(&quot;pnMorCuo&quot;, pnMorCuo.toString())
vars.put(&quot;pnTotCuo&quot;, pnTotCuo.toString())
vars.put(&quot;idTransaccion&quot;, idTransaccion.toString())

// Imprimir en los logs para verificar (opcional)
log.info(&quot;-------------Valor de pnMorCuo: ----------&quot; + pnMorCuo)
log.info(&quot;-------------Valor de pnMorCuo: ----------&quot; + pnTotCuo)
log.info(&quot;-------------Valor de pnMorCuo: ----------&quot; + idTransaccion)
</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Consulta CG" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaCG</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_2: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdnUserEncode}&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;bWVyY2hhbnRwYXltZW50&quot;,&#xd;
    &quot;monto&quot;: &quot;MQ==&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QGZjb21wYXJ0YW1vcw==&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${Authorization}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaCG}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_2: lf-mdw-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/1qw2q7hh</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
        &quot;servicio&quot;: &quot;UGFnYSBjcsOpZGl0byBncnVwYWw=&quot;,&#xd;
        &quot;idTransaccionPDP&quot;: &quot;&quot;,&#xd;
        &quot;param_valor&quot;: &quot;MTUwMzQ5MDM=&quot;,&#xd;
        &quot;param_ordinal&quot;: &quot;MQ==&quot;,&#xd;
        &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
        &quot;datos_adicionales&quot;: &quot;${datos_adicionales}&quot;,&#xd;
        &quot;pago_parcial&quot;: &quot;MQ==&quot;,&#xd;
        &quot;tipo_trx&quot;: &quot;bWVyY2hhbnRwYXltZW50&quot;,&#xd;
        &quot;monto&quot;: &quot;MjAuMDA=&quot;,&#xd;
        &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
        &quot;idServicio&quot;: &quot;MDAwMDAzQEZDT01QQVJUQU1PUw==&quot;,&#xd;
        &quot;idProducto&quot;: &quot;MQ==&quot;,&#xd;
        &quot;recaudador&quot;: &quot;QGZjb21wYXJ0YW1vcw==&quot;,&#xd;
        &quot;empresa&quot;: &quot;Q29tcGFydGFtb3MgRmluYW5jaWVyYQ==&quot;,&#xd;
        &quot;operador&quot;: &quot;${msisdnUserEncode}&quot;,&#xd;
        &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
 }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import java.util.Base64

def ext_pnMorCuo = vars.get(&quot;ext_pnMorCuo&quot;) 
def ext_pnTotCuo = vars.get(&quot;ext_pnTotCuo&quot;) 
def ext_idTransaccion = vars.get(&quot;ext_idTransaccion&quot;) 


def datos_finales = &quot;{&apos;paCuota&apos;: [{&apos;pnOtrCuo&apos;: None, &apos;pnPenCuo&apos;: None, &apos;pcComent&apos;: None, &apos;pnImpMin&apos;: None, &apos;pnGastos&apos;: 0.0, &apos;pnMorCuo&apos;:&quot;+ ext_pnMorCuo +&quot;, &apos;simboloMoneda&apos;: None, &apos;pnComCuo&apos;: 0.0, &apos;pnCapCuo&apos;: 0.0, &apos;pnTotCuo&apos;: &quot;+ ext_pnTotCuo +&quot;, &apos;pcMoneda&apos;: &apos;PEN&apos;, &apos;pdFecVenCuo&apos;: &apos;2024-05-10T00:00:00&apos;, &apos;pnNroCuo&apos;: 5, &apos;pcCodCta&apos;: &apos;14709449&apos;, &apos;pnIntCuo&apos;: 0.0, &apos;totalCuotas&apos;: None, &apos;idTransaccion&apos;: &apos;&quot;+ ext_idTransaccion +&quot;&apos;}], &apos;paCuenta&apos;: [{&apos;pcComent&apos;: None, &apos;pnImpMin&apos;: None, &apos;pnCuoPen&apos;: None, &apos;pnCuoPag&apos;: None, &apos;pnCuotas&apos;: None, &apos;pdFecVen&apos;: None, &apos;pnCuoAct&apos;: None, &apos;pcDesPdc&apos;: None, &apos;pnSalTot&apos;: None, &apos;pnSalMor&apos;: None, &apos;pnSalCom&apos;: None, &apos;pnSalInt&apos;: None, &apos;pnSalCap&apos;: None, &apos;pnMonDes&apos;: None, &apos;pcMoneda&apos;: None, &apos;pcCodCta&apos;: &apos;14709449&apos;, &apos;pnGastos&apos;: None, &apos;pnSaToAn&apos;: None}]}&quot;



def encodeCredentials = Base64.getEncoder().encodeToString(datos_finales.getBytes(&quot;UTF-8&quot;))
vars.put(&quot;datos_finales&quot;, encodeCredentials)
</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0039_3 - Paga Compartamos" enabled="true">
            <stringProp name="TestPlan.comments">ESC003: Recaudación grupal con DNI</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_08.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.Base64

def numero = vars.get(&quot;msisdn_user&quot;) 
def contrasena = vars.get(&quot;password&quot;) 
def credencial = numero + &quot;:&quot; + contrasena
def encodeCredentials = &quot;Basic &quot; + Base64.getEncoder().encodeToString(credencial.getBytes(&quot;UTF-8&quot;))
vars.put(&quot;Authorization&quot;, encodeCredentials)

</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user},msisdnUserEncode)}</stringProp>
              <stringProp name="RESPONSE_DATA">${msisdnUserEncode}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_3: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_3: lf-mdw-consulta-inicio-pago-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/eybieuin</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;traza_app&quot;:&quot;${traza_app_generic}&quot;,&#xd;
	&quot;perfil_user&quot;:&quot;VVNVQVJJT19GSU5BTA==&quot;,&#xd;
	&quot;msisdn&quot;:&quot;${msisdnUserEncode}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${Authorization}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaInicio" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaInicio</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_3: lf-mdw-consulta-creditos-grupales-dni-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/5g0jc5wt</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdnUserEncode}&quot;,&#xd;
    &quot;dni&quot;: &quot;MTUwMzQ5MDM=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${Authorization}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaInicio}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp group_loan" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">group_loan</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;group_loan&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Consulta CG" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaCG</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesDecode" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">${__base64Decode(${group_loan},group_loan_decode)}</stringProp>
                <stringProp name="RESPONSE_DATA">${group_loan_decode}</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp group_loan" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">CodCG</stringProp>
                  <stringProp name="RegexExtractor.regex"> &quot;code_group_credit&quot;: (.+?),</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">${__base64Encode(${CodCG},CodCG_Decode)}</stringProp>
                <stringProp name="RESPONSE_DATA">${CodCG_Decode}</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_3: lf-mdw-consulta-cuotas-credito-grupal-usuario-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/s4dvl4v9</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;user_dni&quot;: &quot;MTUwMzQ5MDM=&quot;,&#xd;
    &quot;credit_number&quot;: &quot;${CodCG_Decode}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${Authorization}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaCG}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ext_idTransaccion" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ext_idTransaccion</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;idTransaccion&quot;: &quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaCuota CG" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaCuotaCG</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="additional_data" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">additional_data</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;additional_data&quot;: &quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesDecode" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">${__base64Decode(${ext_idTransaccion},ext_idTransaccion_decode)}</stringProp>
                <stringProp name="RESPONSE_DATA">${ext_idTransaccion_decode}</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree/>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">${__base64Encode(${ext_idTransaccion_decode}@fcompartamos,dummy2_ext_idTransaccion)}</stringProp>
                <stringProp name="RESPONSE_DATA">${dummy2_ext_idTransaccion}</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_3: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdnUserEncode}&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;bWVyY2hhbnRwYXltZW50&quot;,&#xd;
    &quot;monto&quot;: &quot;MQ==&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QGZjb21wYXJ0YW1vcw==&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${Authorization}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaCuotaCG}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonOutput
def numeroTransaccion = vars.get(&quot;dummy_ext_idTransaccion&quot;) 
def def_datosAdicionales = [
    &quot;paCuota&quot;: [
        [
            &quot;pnOtrCuo&quot;: null, 
            &quot;pnPenCuo&quot;: null, 
            &quot;pcComent&quot;: null, 
            &quot;pnImpMin&quot;: null, 
            &quot;pnGastos&quot;: 0.0, 
            &quot;pnMorCuo&quot;: 0.0, 
            &quot;simboloMoneda&quot;: null, 
            &quot;pnComCuo&quot;: 0.0, 
            &quot;pnCapCuo&quot;: 0.0, 
            &quot;pnTotCuo&quot;: null, 
            &quot;pcMoneda&quot;: &quot;PEN&quot;, 
            &quot;pdFecVenCuo&quot;: &quot;2024-08-05&quot;, 
            &quot;pnNroCuo&quot;: 15034913, 
            &quot;pcCodCta&quot;: &quot;15034903&quot;, 
            &quot;pnIntCuo&quot;: null, 
            &quot;totalCuotas&quot;: null, 
            &quot;idTransaccion&quot;: &quot;${numeroTransaccion}&quot;
        ]
    ],
    &quot;paCuenta&quot;: [
        [
            &quot;pcComent&quot;: null, 
            &quot;pnImpMin&quot;: null, 
            &quot;pnCuoPen&quot;: null, 
            &quot;pnCuoPag&quot;: null, 
            &quot;pnCuotas&quot;: null, 
            &quot;pdFecVen&quot;: null, 
            &quot;pnCuoAct&quot;: null, 
            &quot;pcDesPdc&quot;: null, 
            &quot;pnSalTot&quot;: null, 
            &quot;pnSalMor&quot;: null, 
            &quot;pnSalCom&quot;: null, 
            &quot;pnSalInt&quot;: null, 
            &quot;pnSalCap&quot;: null, 
            &quot;pnMonDes&quot;: null, 
            &quot;pcMoneda&quot;: null, 
            &quot;pcCodCta&quot;: &quot;15034903&quot;, 
            &quot;pnGastos&quot;: null, 
            &quot;pnSaToAn&quot;: null
        ]
    ],
    &quot;poListaDetallePago&quot;: [
        &quot;DetallePago&quot;: [
            [
                &quot;pnMonto&quot;: null, 
                &quot;pcTipoDocumento&quot;: 1, 
                &quot;pcDocumento&quot;: &quot;44675537&quot;
            ]
        ]
    ]
]

// Convertir a JSON
def datosAdicionalesJson = JsonOutput.toJson(def_datosAdicionales)

// Guardar la variable
vars.put(&quot;def_datosAdicionales&quot;, datosAdicionalesJson)

// Log para depuración
log.info(&quot;-------------------DATOS ADICIONALES-------------&quot;)
log.info(datosAdicionalesJson)
log.info(&quot;---------------idtrasaccion ---------------------:&quot; + numeroTransaccion)



</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="false">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">${__base64Encode(${def_datosAdicionales},dummy_datosAdicionalesJson)}</stringProp>
                <stringProp name="RESPONSE_DATA">${dummy_datosAdicionalesJson}
</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0039_3: lf-mdw-pago-credito-grupal-usuario-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/a9qyb3ka</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdnUserEncode}&quot;,&#xd;
    &quot;idTransaccionPDP&quot;: &quot;${dummy2_ext_idTransaccion}&quot;,&#xd;
    &quot;param_valor&quot;: &quot;${CodCG_Decode}&quot;,&#xd;
    &quot;param_ordinal&quot;: &quot;MQ==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;datos_adicionales&quot;: &quot;${additional_data}&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MQ==&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;bWVyY2hhbnRwYXltZW50&quot;,&#xd;
    &quot;monto&quot;: &quot;MTA=&quot;,&#xd;
    &quot;idServicio&quot;: &quot;MDAwMDA0QEZDT01QQVJUQU1PUw==&quot;,&#xd;
    &quot;idProducto&quot;: &quot;MQ==&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QGZjb21wYXJ0YW1vcw==&quot;,&#xd;
    &quot;empresa&quot;: &quot;Q29tcGFydGFtb3MgRmluYW5jaWVyYQ==&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;,&#xd;
    &quot;servicio&quot;:&quot;UGFnYSBjcsOpZGl0byBncnVwYWw=&quot;&#xd;
&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0040_1 - Paga Los andes" enabled="true">
            <stringProp name="TestPlan.comments">ESC001: Pagar CR Andes</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_09.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user}:${password},AuthorizationEncode)}
${__base64Encode(${msisdn_user},msisdn_Encode)}</stringProp>
              <stringProp name="RESPONSE_DATA">${AuthorizationEncode}
${msisdn_Encode}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0040_1: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0040_1: lf-mdw-perfil-app-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/6hdqwkh2</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;msisdn&quot;: &quot;${msisdn_Encode}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Basic ${AuthorizationEncode}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_Encode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token PerfilBIM" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenPerfilBIM</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0040_1: lf-mdw-consulta-deuda-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q0iu80rb</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;param_ordinal&quot;: &quot;MQ==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MQ==&quot;,&#xd;
    &quot;idCliente&quot;: &quot;MDAwMDA0QENSQU5ERVM=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idProducto&quot;: &quot;MQ==&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QGNyYW5kZXM=&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_Encode}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;,&#xd;
    &quot;param_valor&quot;: &quot;MTI4OTc0NA==&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenPerfilBIM}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_Encode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp DatosAdicionales" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">DatosAdicionales</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;datos_adicionales&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaDeuda" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaDeuda</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0040_1: lf-mdw-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/1qw2q7hh</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;servicio&quot;: &quot;UGFnbyBlbiBsw61uZWE=&quot;,&#xd;
    &quot;idTransaccionPDP&quot;: &quot;&quot;,&#xd;
    &quot;param_valor&quot;: &quot;MTI4OTc0NA==&quot;,&#xd;
    &quot;param_ordinal&quot;: &quot;MA==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;datos_adicionales&quot;: &quot;${DatosAdicionales}&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MQ==&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;bWVyY2hhbnRwYXltZW50&quot;,&#xd;
    &quot;monto&quot;: &quot;MjguNzE=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idServicio&quot;: &quot;MDAwMDA0QENSQU5ERVM=&quot;,&#xd;
    &quot;idProducto&quot;: &quot;MQ==&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QGNyYW5kZXM=&quot;,&#xd;
    &quot;empresa&quot;: &quot;Q2FqYSBSdXJhbCBMb3MgQW5kZXM=&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_Encode}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaDeuda}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_Encode}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0042_1 - Pagar Servicios - Financieros" enabled="true">
            <stringProp name="TestPlan.comments">ESC001: Pagar Servicios - Financieros con recaudador WU</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_10.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user}:${password},AuthorizationEncode)}
${__base64Encode(${msisdn_user},msisdn_user_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${AuthorizationEncode}
${msisdn_user_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              <stringProp name="TestPlan.comments">Encodear en B64 el msisdn</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0042_1: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0042_1: lf-mdw-listar-categorias-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/aw68br9z</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;perfil_user&quot;:&quot;QklNRVI=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Categoria" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenCategoria</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0042_1: lf-mdw-listar-empresas-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/7mefml3g</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;categoria&quot;: &quot;RmluYW5jaWVybw==&quot;,&#xd;
    &quot;pagina_actual&quot;: &quot;MQ==&quot;,&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTE=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;VVNVQVJJT19GSU5BTA==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenCategoria}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Empresa" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenEmpresa</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0042_1: lf-mdw-listar-empresas-buscador-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/x8asmm0u</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTE=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;VVNVQVJJT19GSU5BTA==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;empresa&quot;: &quot;QmFuY28gUGljaGluY2hh&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0042_1: lf-mdw-consulta-deuda-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q0iu80rb</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;param_ordinal&quot;: &quot;MQ==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;idCliente&quot;: &quot;MDAwOTBAV1U=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjAyMjk=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;,&#xd;
    &quot;param_valor&quot;: &quot;OTk5NDMyMzk=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp deuda_total" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">deuda_total</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;deuda_total&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp datos_adicionales" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">datos_adicionales</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;datos_adicionales&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaDeuda" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaDeuda</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0042_1: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${deuda_total}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaDeuda}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0042_1: lf-mdw-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/1qw2q7hh</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;servicio&quot;: &quot;UGFnbyBkZSBwcsOpc3RhbW9z&quot;,&#xd;
    &quot;idTransaccionPDP&quot;: &quot;&quot;,&#xd;
    &quot;param_valor&quot;: &quot;OTk5NDMyMzk=&quot;,&#xd;
    &quot;param_ordinal&quot;: &quot;MA==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;datos_adicionales&quot;: &quot;${datos_adicionales}&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MQ==&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${deuda_total}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idServicio&quot;: &quot;MDAwOTBAV1U=&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjAyMjk=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;empresa&quot;: &quot;QmFuY28gUGljaGluY2hh&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Pago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0043_1 - Pagar Yanbal" enabled="true">
            <stringProp name="TestPlan.comments">ESC001: Pagar Yanbal</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_11.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user},msisdn_user_enc)}
${__base64Encode(${codYANBAL},codYANBAL_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${msisdn_user_enc}
${codYANBAL_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0043_1: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0043_1: lf-mdw-consulta-deuda-unique-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/rx0j35av</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;msisdn&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;param_valor&quot;: &quot;MTEyNDE2NjAxOQ==&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname=" Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp datos_adicionales" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">datos_adicionales</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;datos_adicionales&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp recaudador" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">recaudador</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;recaudador&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp montoMin" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">montoMin</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;min&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaDeuda" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsulta</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0043_1: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;datos_adicionales&quot;: &quot;${datos_adicionales}&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${montoMin}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;${recaudador}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsulta}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0043_1: lf-mdw-pagar-unique-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/uule1ey8</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;datos_adicionales&quot;: &quot;${datos_adicionales}&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${montoMin}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;${recaudador}&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;param_valor&quot;: &quot;MTEyNDE2NjAxOQ==&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="false">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0044_1 - Pagar Servicios - Belleza" enabled="true">
            <stringProp name="TestPlan.comments">ESC001: Pagos de servicio de belleza</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_12.csv</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user}:${password},AuthorizationEncode)}
${__base64Encode(${msisdn_user},msisdn_user_enc)}
${__base64Encode(${codConsulta},codConsulta_Enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${AuthorizationEncode}
${msisdn_user_enc}
${codConsulta_Enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0044_1: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0044_1: lf-mdw-listar-categorias-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/aw68br9z</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;perfil_user&quot;:&quot;QklNRVI=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Categoria" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenCategoria</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0044_1: lf-mdw-listar-empresas-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/7mefml3g</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;categoria&quot;: &quot;QmVsbGV6YQ==&quot;,&#xd;
    &quot;pagina_actual&quot;: &quot;MQ==&quot;,&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTM=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;QklNRVI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenCategoria}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Empresa" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenEmpresa</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0044_1: lf-mdw-listar-empresas-buscador-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/x8asmm0u</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTM=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;QklNRVI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;empresa&quot;: &quot;RXNpa2E=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0044_1: lf-mdw-consulta-deuda-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q0iu80rb</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;param_ordinal&quot;: &quot;MQ==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;idCliente&quot;: &quot;MDAxMDRAV1U=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1Mzk5Njc=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;operador&quot;: &quot;NTE5MzMxMjY0Mzk=&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;,&#xd;
    &quot;param_valor&quot;: &quot;NTExMjIzMw==&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp DatosAdicionales" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">DatosAdicionales</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;datos_adicionales&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Categoria" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenCategoria</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaDeuda" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaDeuda</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0044_1: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;MS4wMA==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaDeuda}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0044_1: lf-mdw-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/1qw2q7hh</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;servicio&quot;: &quot;UGFnbyBkZSBzZXJ2aWNpbw==&quot;,&#xd;
	&quot;idTransaccionPDP&quot;: &quot;&quot;,&#xd;
	&quot;param_valor&quot;: &quot;MDQ5OTg4ODM0&quot;,&#xd;
	&quot;param_ordinal&quot;: &quot;MA==&quot;,&#xd;
	&quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
	&quot;datos_adicionales&quot;: &quot;${DatosAdicionales}&quot;,&#xd;
	&quot;pago_parcial&quot;: &quot;MQ==&quot;,&#xd;
	&quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
	&quot;monto&quot;: &quot;MTAuMDA=&quot;,&#xd;
	&quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
	&quot;idServicio&quot;: &quot;MDAxMDNAV1U=&quot;,&#xd;
	&quot;idProducto&quot;: &quot;Nzc1MjAyMTU=&quot;,&#xd;
	&quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
	&quot;empresa&quot;: &quot;RXNpa2E=&quot;,&#xd;
	&quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
	&quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Pago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="lf-mdw-consulta-limite-favorito-app-bim" enabled="false">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/z09pc45d</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;perfil_user&quot;: &quot;VVNVQVJJT19GSU5BTA==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="false">
                <collectionProp name="AuthManager.auth_list">
                  <elementProp name="" elementType="Authorization">
                    <stringProp name="Authorization.url"></stringProp>
                    <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                    <stringProp name="Authorization.password">${password}</stringProp>
                    <stringProp name="Authorization.domain"></stringProp>
                    <stringProp name="Authorization.realm"></stringProp>
                  </elementProp>
                </collectionProp>
                <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
              </AuthManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="token" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${TokenPago}</stringProp>
                  </elementProp>
                  <elementProp name="msisdn" elementType="Header">
                    <stringProp name="Header.name">msisdn</stringProp>
                    <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0045_1 - Pagar Servicios - Luz" enabled="true">
            <stringProp name="TestPlan.comments">ESC001: Pagos de Servicio de Luz - RECAUDADOR WU</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_13.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user}:${password},AuthorizationEncode)}
${__base64Encode(${msisdn_user},msisdn_user_enc)}
${__base64Encode(${codConsultaWU},codConsultaWU_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${AuthorizationEncode}
${msisdn_user_enc}
${codConsultaWU_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0045_1: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0045_1: lf-mdw-listar-categorias-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/aw68br9z</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;perfil_user&quot;:&quot;QklNRVI=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Categoria" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenCategoria</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0045_1: lf-mdw-listar-empresas-buscador-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/x8asmm0u</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTI=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;QklNRVI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;empresa&quot;: &quot;RWxlY3Ryb3N1cg==&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenCategoria}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0045_1: lf-mdw-listar-empresas-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/7mefml3g</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;categoria&quot;: &quot;THV6&quot;,&#xd;
    &quot;pagina_actual&quot;: &quot;MQ==&quot;,&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTI=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;QklNRVI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenCategoria}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Empresa" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenEmpresa</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0045_1: lf-mdw-consulta-deuda-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q0iu80rb</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;param_ordinal&quot;: &quot;MQ==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;idCliente&quot;: &quot;MDAwNzRAV1U=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjAzODQ=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;,&#xd;
    &quot;param_valor&quot;: &quot;NTk1MzQ3Mg==&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp deuda_total" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">DeudaTotal</stringProp>
                  <stringProp name="RegexExtractor.regex"> &quot;deuda_total&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">DatosAdicionales</stringProp>
                  <stringProp name="RegexExtractor.regex"> &quot;datos_adicionales&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaDeuda" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaDeuda</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0045_1: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${DeudaTotal}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaDeuda}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0045_1: lf-mdw-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/1qw2q7hh</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;servicio&quot;: &quot;UGFnbyBkZSBsdXo=&quot;,&#xd;
    &quot;idTransaccionPDP&quot;: &quot;&quot;,&#xd;
    &quot;param_valor&quot;: &quot;NTk1MzQ3Mg==&quot;,&#xd;
    &quot;param_ordinal&quot;: &quot;MA==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;datos_adicionales&quot;: &quot;${DatosAdicionales}&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${DeudaTotal}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idServicio&quot;: &quot;MDAwNzRAV1U=&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjAzODQ=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;empresa&quot;: &quot;RWxlY3Ryb3N1cg==&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Pago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0046_1 - Pagar Servicios - Cable" enabled="true">
            <stringProp name="TestPlan.comments">ESC001: Pagar servicio de cable</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_14.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user}:${password},AuthorizationEncode)}
${__base64Encode(${msisdn_user},msisdn_user_enc)}
${__base64Encode(${codConsultaCable},codConsultaCable_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${AuthorizationEncode}
${msisdn_user_enc}
${codConsultaCable_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              <stringProp name="TestPlan.comments">Encodear en B64 el msisdn</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0046_1: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0046_1: lf-mdw-listar-categorias-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/aw68br9z</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;perfil_user&quot;:&quot;QklNRVI=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Categoria" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenCategoria</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0046_1: lf-mdw-listar-empresas-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/7mefml3g</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;categoria&quot;: &quot;Q2FibGU=&quot;,&#xd;
    &quot;pagina_actual&quot;: &quot;MQ==&quot;,&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUOA==&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;VVNVQVJJT19GSU5BTA==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenCategoria}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Empresa" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenEmpresa</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0046_1: lf-mdw-listar-empresas-buscador-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/x8asmm0u</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUOA==&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;VVNVQVJJT19GSU5BTA==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;empresa&quot;: &quot;RGlyZWN0dg==&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0046_1: lf-mdw-consulta-deuda-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q0iu80rb</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;param_ordinal&quot;: &quot;Mg==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;idCliente&quot;: &quot;MDAwNjFAV1U=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjAxODk=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;,&#xd;
    &quot;param_valor&quot;: &quot;MDAxMTkzODcwNTkw&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp deuda_total" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">deuda_total</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;deuda_total&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp datos_adicionales" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">datos_adicionales</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;datos_adicionales&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaDeuda" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaDeuda</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0046_1: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${deuda_total}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaDeuda}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0046_1: lf-mdw-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/1qw2q7hh</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;servicio&quot;: &quot;UmVjYXJnYSAtIE5yby4gZGUgVGFyamV0YQ==&quot;,&#xd;
    &quot;idTransaccionPDP&quot;: &quot;&quot;,&#xd;
    &quot;param_valor&quot;: &quot;MDAxMTkzODcwNTkw&quot;,&#xd;
    &quot;param_ordinal&quot;: &quot;MA==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;datos_adicionales&quot;: &quot;${datos_adicionales}&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MQ==&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${deuda_total}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idServicio&quot;: &quot;MDAwMDZAV1U=&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjAxODk=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;empresa&quot;: &quot;RGlyZWN0dg==&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Pago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0047_1 - Pagar Servicios - Gas" enabled="true">
            <stringProp name="TestPlan.comments">ESC001: Pagar servicio de gas</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_15.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user}:${password},AuthorizationEncode)}
${__base64Encode(${msisdn_user},msisdn_user_enc)}
${__base64Encode(${codConsultaGAS},codConsultaGAS_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${AuthorizationEncode}
${msisdn_user_enc}
${codConsultaGAS_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              <stringProp name="TestPlan.comments">Encodear en B64 el msisdn</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0047_1: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0047_1: lf-mdw-listar-categorias-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/aw68br9z</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;perfil_user&quot;:&quot;QklNRVI=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Categoria" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenCategoria</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0047_1: lf-mdw-listar-empresas-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/7mefml3g</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;categoria&quot;: &quot;R2Fz&quot;,&#xd;
    &quot;pagina_actual&quot;: &quot;MQ==&quot;,&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTQ=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;VVNVQVJJT19GSU5BTA==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenCategoria}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Empresa" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenEmpresa</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0047_1: lf-mdw-listar-empresas-buscador-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/x8asmm0u</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTI=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;VVNVQVJJT19GSU5BTA==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;empresa&quot;: &quot;Q2FsaWRkYQ==&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0047_1: lf-mdw-consulta-deuda-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q0iu80rb</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;param_ordinal&quot;: &quot;MQ==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;idCliente&quot;: &quot;MDAwNTFAV1U=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjAyMTM=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;,&#xd;
    &quot;param_valor&quot;: &quot;MTEyMjMz&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp deuda_total" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">deuda_total</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;deuda_total&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp datos_adicionales" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">datos_adicionales</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;datos_adicionales&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaDeuda" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaDeuda</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0047_1: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${deuda_total}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaDeuda}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0047_1: lf-mdw-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/1qw2q7hh</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;servicio&quot;: &quot;UGFnbyBkZSBnYXM=&quot;,&#xd;
    &quot;idTransaccionPDP&quot;: &quot;&quot;,&#xd;
    &quot;param_valor&quot;: &quot;MTEyMjMz&quot;,&#xd;
    &quot;param_ordinal&quot;: &quot;MA==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;datos_adicionales&quot;: &quot;${datos_adicionales}&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${deuda_total}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idServicio&quot;: &quot;MDAwNTFAV1U=&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjAyMTM=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;empresa&quot;: &quot;Q2FsaWRkYQ==&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Pago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0048_1 - Pagar Servicios - Agua" enabled="true">
            <stringProp name="TestPlan.comments">ESC001: Pagos de servicio de Agua</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_16.csv</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user}:${password},AuthorizationEncode)}
${__base64Encode(${msisdn_user},msisdn_user_enc)}
${__base64Encode(${codConsulta},codConsulta_Enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${AuthorizationEncode}
${msisdn_user_enc}
${codConsulta_Enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0048_1: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0048_1: lf-mdw-listar-categorias-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/aw68br9z</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;perfil_user&quot;:&quot;QklNRVI=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Categoria" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenCategoria</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0048_1: lf-mdw-listar-empresas-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/7mefml3g</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{   &#xd;
	&quot;categoria&quot;: &quot;QWd1YQ==&quot;,&#xd;
    &quot;pagina_actual&quot;: &quot;MQ==&quot;,&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTY=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;QklNRVI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenCategoria}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Empresa" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenEmpresa</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0048_1: lf-mdw-listar-empresas-buscador-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/x8asmm0u</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMTY=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;QklNRVI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;empresa&quot;: &quot;RVBTRUw=&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0048_1: lf-mdw-consulta-deuda-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q0iu80rb</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;param_ordinal&quot;: &quot;MQ==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;idCliente&quot;: &quot;MDAwNjBAV1U=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjAwMjU=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;,&#xd;
    &quot;param_valor&quot;: &quot;NjQwMzE1Ng==&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp DatosAdicionales" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">DatosAdicionales</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;datos_adicionales&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Deudas" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Deudas</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;deudas&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaDeuda" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaDeuda</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesDecode" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">${__base64Decode(${Deudas},DeudasDec)}</stringProp>
                <stringProp name="RESPONSE_DATA">${__base64Decode(${Deudas},DeudasDec)}</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp ImporteTotal" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ImporteTotal</stringProp>
                  <stringProp name="RegexExtractor.regex">&apos;importetotal&apos;: &apos;(.+?)&apos;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp idTransaccion" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">idTransaccion</stringProp>
                  <stringProp name="RegexExtractor.regex">&apos;idTransaccion&apos;: &apos;(.+?)&apos;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">${__base64Encode(${ImporteTotal},ImporteTotal_Enc)}
${__base64Encode(${idTransaccion}@gmoney,idTransaccion_Enc)}</stringProp>
                <stringProp name="RESPONSE_DATA">${ImporteTotal_Enc}
${idTransaccion_Enc}</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0048_1: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${ImporteTotal_Enc}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaDeuda}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0048_1: lf-mdw-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/1qw2q7hh</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;servicio&quot;: &quot;UGFnbyBkZSBhZ3Vh&quot;,&#xd;
    &quot;idTransaccionPDP&quot;: &quot;${idTransaccion_Enc}&quot;,&#xd;
    &quot;param_valor&quot;: &quot;NjQwMzE1Ng==&quot;,&#xd;
    &quot;param_ordinal&quot;: &quot;MA==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;datos_adicionales&quot;: &quot;${DatosAdicionales}&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${ImporteTotal_Enc}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idServicio&quot;: &quot;MDAwNjBAV1U=&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjAwMjU=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;empresa&quot;: &quot;U2VkYXBhbA==&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="lf-mdw-consulta-limite-favorito-app-bim" enabled="false">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/z09pc45d</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;perfil_user&quot;: &quot;VVNVQVJJT19GSU5BTA==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="false">
                <collectionProp name="AuthManager.auth_list">
                  <elementProp name="" elementType="Authorization">
                    <stringProp name="Authorization.url"></stringProp>
                    <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                    <stringProp name="Authorization.password">${password}</stringProp>
                    <stringProp name="Authorization.domain"></stringProp>
                    <stringProp name="Authorization.realm"></stringProp>
                  </elementProp>
                </collectionProp>
                <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
              </AuthManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="token" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${TokenPago}</stringProp>
                  </elementProp>
                  <elementProp name="msisdn" elementType="Header">
                    <stringProp name="Header.name">msisdn</stringProp>
                    <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0049_1 - Pagar Servicios - Internet" enabled="true">
            <stringProp name="TestPlan.comments">ESC001: Pagar servicio de internet</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_17.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user}:${password},AuthorizationEncode)}
${__base64Encode(${msisdn_user},msisdn_user_enc)}
${__base64Encode(${codConsultaINTERNET},codConsultaINTERNET_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${AuthorizationEncode}
${msisdn_user_enc}
${codConsultaINTERNET_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              <stringProp name="TestPlan.comments">Encodear en B64 el msisdn</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0049_1: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0049_1: lf-mdw-listar-categorias-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/aw68br9z</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;perfil_user&quot;:&quot;QklNRVI=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Categoria" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenCategoria</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0049_1: lf-mdw-listar-empresas-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/7mefml3g</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;categoria&quot;: &quot;SW50ZXJuZXQ=&quot;,&#xd;
    &quot;pagina_actual&quot;: &quot;MQ==&quot;,&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMjQ=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;VVNVQVJJT19GSU5BTA==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenCategoria}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Empresa" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenEmpresa</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0049_1: lf-mdw-listar-empresas-buscador-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/x8asmm0u</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMjQ=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;VVNVQVJJT19GSU5BTA==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;empresa&quot;: &quot;TW92aXN0YXI=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0049_1: lf-mdw-consulta-deuda-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q0iu80rb</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;param_ordinal&quot;: &quot;MQ==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;idCliente&quot;: &quot;MDAwMzRAV1U=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjA0MDQ=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;,&#xd;
    &quot;param_valor&quot;: &quot;NjA1ODEyODQx&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp deuda_total" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">deuda_total</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;deuda_total&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp datos_adicionales" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">datos_adicionales</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;datos_adicionales&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaDeuda" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaDeuda</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0049_1: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${deuda_total}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaDeuda}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0049_1: lf-mdw-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/1qw2q7hh</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;servicio&quot;: &quot;TW92aXN0YXIgQ3VlbnRhcw==&quot;,&#xd;
    &quot;idTransaccionPDP&quot;: &quot;&quot;,&#xd;
    &quot;param_valor&quot;: &quot;NjA1ODEyODQx&quot;,&#xd;
    &quot;param_ordinal&quot;: &quot;MA==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;datos_adicionales&quot;: &quot;${datos_adicionales}&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${deuda_total}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idServicio&quot;: &quot;MDAwMzRAV1U=&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjA0MDQ=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;empresa&quot;: &quot;TW92aXN0YXI=&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0050_1 - Pagar Servicios - Impuestos" enabled="true">
            <stringProp name="TestPlan.comments">ESC001: Pagos de servicios de Impuestos</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_18.csv</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${msisdn_user}:${password},AuthorizationEncode)}
${__base64Encode(${msisdn_user},msisdn_user_enc)}
${__base64Encode(${codConsulta},codConsulta_Enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${AuthorizationEncode}
${msisdn_user_enc}
${codConsulta_Enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0050_1: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id_indigitall&quot;: &quot;8dcc9431-5df9-4b57-94cb-acf079f94e0e&quot;,&#xd;
  &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Login" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0050_1: lf-mdw-listar-categorias-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/aw68br9z</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;perfil_user&quot;:&quot;QklNRVI=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Categoria" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenCategoria</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0050_1: lf-mdw-listar-empresas-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/7mefml3g</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;categoria&quot;: &quot;SW1wdWVzdG9z&quot;,&#xd;
    &quot;pagina_actual&quot;: &quot;MQ==&quot;,&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMjQ=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;QklNRVI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenCategoria}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token Empresa" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenEmpresa</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0050_1: lf-mdw-listar-empresas-buscador-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/x8asmm0u</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;idcategoria&quot;: &quot;Q0FUMjQ=&quot;,&#xd;
    &quot;perfil_user&quot;: &quot;QklNRVI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;empresa&quot;: &quot;U0FUIExpbWE=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0050_1: lf-mdw-consulta-deuda-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q0iu80rb</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;param_ordinal&quot;: &quot;MQ==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;idCliente&quot;: &quot;MDAwODRAV1U=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjAyNTI=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;,&#xd;
    &quot;param_valor&quot;: &quot;NzAxNjEwMjU=&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenEmpresa}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp DatosAdicionales" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">DatosAdicionales</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;datos_adicionales&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp DeudaTotal" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">DeudaTotal</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;deuda_total&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token ConsultaDeuda" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenConsultaDeuda</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0050_1: lf-mdw-consulta-info-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/fsgx233i</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${DeudaTotal}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenConsultaDeuda}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenInfoPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0050_1: lf-mdw-pago-servicios-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/1qw2q7hh</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;servicio&quot;: &quot;QWxjYWJhbGEgby9EaXN0cg==&quot;,&#xd;
    &quot;idTransaccionPDP&quot;: &quot;&quot;,&#xd;
    &quot;param_valor&quot;: &quot;NzAxNjEwMjU=&quot;,&#xd;
    &quot;param_ordinal&quot;: &quot;MA==&quot;,&#xd;
    &quot;subtipo_servicio&quot;: &quot;c2VydmljaW8=&quot;,&#xd;
    &quot;datos_adicionales&quot;: &quot;${DatosAdicionales}&quot;,&#xd;
    &quot;pago_parcial&quot;: &quot;MA==&quot;,&#xd;
    &quot;tipo_trx&quot;: &quot;cGF5bWVudA==&quot;,&#xd;
    &quot;monto&quot;: &quot;${DeudaTotal}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;idServicio&quot;: &quot;MDAwODRAV1U=&quot;,&#xd;
    &quot;idProducto&quot;: &quot;Nzc1MjAyNTI=&quot;,&#xd;
    &quot;recaudador&quot;: &quot;QHd1&quot;,&#xd;
    &quot;empresa&quot;: &quot;U0FUIExpbWE=&quot;,&#xd;
    &quot;operador&quot;: &quot;${msisdn_user_enc}&quot;,&#xd;
    &quot;tipo_servicio&quot;: &quot;b25saW5l&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${TokenInfoPago}</stringProp>
                    </elementProp>
                    <elementProp name="msisdn" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdn_user_enc}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp Token InfoPago" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">TokenPago</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0055_1 - Mandar plata" enabled="true">
            <stringProp name="TestPlan.comments">ESC001: Mandar plata de BIM a BIM por p2p</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">${dataCSV}\parte_19.csv</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames"></stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor Login" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${destination_msisdn},destination_msisdn_enc)}
${__base64Encode(${msisdn_user},msisdnUserEncode)}
${__base64Encode(${transaction_amount},transaction_amount_enc)}
${__base64Encode(${destination_entity},destination_entity_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${destination_msisdn_enc}
${msisdnUserEncode}
${transaction_amount_enc}
${destination_entity_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_1: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;id_indigitall&quot;: &quot;fda8d529-b6c0-4046-8379-a1783e70beb9&quot;,&#xd;
	&quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenLogin" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">tokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_1: lf-mdw-mandar-plata-listar-favoritos-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/iu4q679j</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xNTk=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenLisFav" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenLisFav</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_1: lf-mdw-validar-usuario-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q446t9wm</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;:&quot;NTE5NjIzMzMzNzE=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMjc=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenLisFav}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenValUsuario" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenValUsuario</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_1: lf-mdw-consultar-info-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/6yajv8x5</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;: &quot;NTE5NjIzMzMzNzE=&quot;,&#xd;
    &quot;destination_entity&quot;: &quot;QklN&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origin_msisdn&quot;: &quot;${msisdnUserEncode}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMjk=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenValUsuario}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokeConsultarInfo" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokeConsultarInfo</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_1: lf-mdw-cotizacion-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/kle2gq5v</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;: &quot;NTE5NjIzMzMzNzE=&quot;,&#xd;
    &quot;amount&quot;: &quot;Mg==&quot;,&#xd;
    &quot;destination_entity&quot;: &quot;QklN&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origin_msisdn&quot;: &quot;${msisdnUserEncode}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMzA=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokeConsultarInfo}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokecotizacionP2p" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokecotizacionP2p</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_1: lf-mdw-mandar-plata-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/zqfqhep0</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;motivo&quot;: &quot;&quot;,&#xd;
    &quot;monto&quot;: &quot;Mg==&quot;,&#xd;
    &quot;entidad_destino&quot;: &quot;QklN&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdnUserEncode}&quot;,&#xd;
    &quot;destino&quot;: &quot;NTE5NjIzMzMzNzE=&quot;,&#xd;
    &quot;trx&quot;: &quot;TUFOREFSX1BMQVRB&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMw==</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokecotizacionP2p}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0055_2 - Mandar plata" enabled="true">
            <stringProp name="TestPlan.comments">ESC002: Mandar plata por QR</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">${dataCSV}\parte_20.csv</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames"></stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor Login" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${destination_msisdn},destination_msisdn_enc)}
${__base64Encode(${msisdn_user},msisdnUserEncode)}
${__base64Encode(${transaction_amount},transaction_amount_enc)}
${__base64Encode(${destination_entity},destination_entity_enc)}
${__base64Encode(${QRBim},QRBim_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${destination_msisdn_enc}
${msisdnUserEncode}
${transaction_amount_enc}
${destination_entity_enc}
${QRBim_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_2: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;id_indigitall&quot;: &quot;fda8d529-b6c0-4046-8379-a1783e70beb9&quot;,&#xd;
	&quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenLogin" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">tokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_2: lf-mdw-generateqr-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/obpc37jx</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;storelabel&quot;: &quot;&quot;,&#xd;
	&quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
	&quot;fechavencimiento&quot;: &quot;&quot;,&#xd;
	&quot;uri&quot;: &quot;&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenQR" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenQR</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp qr_bim_destino" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">qr_bim_destino</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;text&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_2: lf-mdw-inicio-pago-qr-otp-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/5t9hogps</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;qr&quot;: &quot;MDAwMjAxMDEwMjExMzc4NzAwMDhUUkFOU0ZFUjAxNjRjQjh2Wkp0dlBMMzQzbGxqY3RzU0xUbXBOcUNXdUErcUwrMUhmcXhsTW5FV1R2NUEyeTNEL0VoSGxBWmhOQT09MzcwM0JpbTUyMDQ1OTk5NTMwMzYwNDU4MDJQRTU5MDZCSU1FUk82MDEwTWlyYWZsb3JlczYyNjg5OTY0MTE0M2M1MTk0MjE1ZTkxNzM1ZTA0ZjQ1N2JkYzMwNzJjMTIzMWM1YzE3YzkyNjJmYWI4MzZjMGU4NzAyYzU1OTYzMDRGRjVG&quot;,&#xd;
    &quot;transaccion&quot;: &quot;Q09NUFJB&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xNTk=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenQR}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenInicioPagoQR" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenInicioPagoQR</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp  idinicioPagoQR" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">idinicioPagoQR</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;id_pdp&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp  alias1" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">alias1</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;alias&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_2: lf-mdw-cotizacion-pago-qr-estatico-opt-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/ocfsmk4k</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id_pdp&quot;: &quot;${idinicioPagoQR}&quot;,&#xd;
    &quot;monto&quot;: &quot;Mg==&quot;,&#xd;
    &quot;alias&quot;: &quot;${alias1}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;referencia&quot;: &quot;&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF81Mw==</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenInicioPagoQR}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenCotizacionEstatica" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenCotizacionEstatica</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp  alias2" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">alias2</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;alias&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_2: lf-mdw-pago-qr-dinamico-otp-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/d21aq169</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id_pdp&quot;: &quot;${idinicioPagoQR}&quot;,&#xd;
    &quot;alias&quot;: &quot;${alias2}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;referencia&quot;: &quot;&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF81NA==</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenCotizacionEstatica}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0055_3 - Mandar plata" enabled="true">
            <stringProp name="TestPlan.comments">ESC003: Compartir vaucher de mandar plata P2P con perfil de usuario bimer</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">${dataCSV}\parte_21.csv</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames"></stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor Login" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${destination_msisdn},destination_msisdn_enc)}
${__base64Encode(${msisdn_user},msisdnUserEncode)}
${__base64Encode(${transaction_amount},transaction_amount_enc)}
${__base64Encode(${destination_entity},destination_entity_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${destination_msisdn_enc}
${msisdnUserEncode}
${transaction_amount_enc}
${destination_entity_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_3: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;id_indigitall&quot;: &quot;fda8d529-b6c0-4046-8379-a1783e70beb9&quot;,&#xd;
	&quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenLogin" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">tokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_3: lf-mdw-mandar-plata-listar-favoritos-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/iu4q679j</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xNTk=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenLisFav" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenLisFav</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_3: lf-mdw-validar-usuario-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q446t9wm</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;:&quot;NTE5NjIzMzMzNzE=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMjc=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenLisFav}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenValUsuario" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenValUsuario</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_3: lf-mdw-consultar-info-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/6yajv8x5</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;: &quot;NTE5NjIzMzMzNzE=&quot;,&#xd;
    &quot;destination_entity&quot;: &quot;QklN&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origin_msisdn&quot;: &quot;${msisdnUserEncode}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMjk=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenValUsuario}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokeConsultarInfo" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokeConsultarInfo</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_3: lf-mdw-cotizacion-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/kle2gq5v</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;: &quot;NTE5NjIzMzMzNzE=&quot;,&#xd;
    &quot;amount&quot;: &quot;Mg==&quot;,&#xd;
    &quot;destination_entity&quot;: &quot;QklN&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origin_msisdn&quot;: &quot;${msisdnUserEncode}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMzA=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokeConsultarInfo}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokecotizacionP2p" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokecotizacionP2p</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_3: lf-mdw-mandar-plata-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/zqfqhep0</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;motivo&quot;: &quot;&quot;,&#xd;
    &quot;monto&quot;: &quot;Mg==&quot;,&#xd;
    &quot;entidad_destino&quot;: &quot;QklN&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdnUserEncode}&quot;,&#xd;
    &quot;destino&quot;: &quot;NTE5NjIzMzMzNzE=&quot;,&#xd;
    &quot;trx&quot;: &quot;TUFOREFSX1BMQVRB&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMw==</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokecotizacionP2p}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp id_tran Manda plata" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">id_tran</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;id_tran&quot;: &quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokemandaplataP2p" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokemandaplataP2p</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0055_3: lf-mdw-compartir-resultado-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/37k9g907</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;id_tran&quot;: &quot;${id_tran}&quot;,&#xd;
    &quot;msisdn_destino&quot;: &quot;NTE5NjIzMzMzNzE=&quot;,&#xd;
    &quot;msisdn_origen&quot;: &quot;${msisdnUserEncode}&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokemandaplataP2p}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0056_1 - Manda plata desde Bim hacia cualquier otra Billetera (No Bim)" enabled="true">
            <stringProp name="TestPlan.comments">ESC001: Mandar plata a (YAPE / PLIN) por P2P con perfil de usuario final o Bimer</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">${dataCSV}\parte_22.csv</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames"></stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor Login" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${destination_msisdn},destination_msisdn_enc)}
${__base64Encode(${msisdn_user},msisdnUserEncode)}
${__base64Encode(${transaction_amount},transaction_amount_enc)}
${__base64Encode(${destination_entity},destination_entity_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${destination_msisdn_enc}
${msisdnUserEncode}
${transaction_amount_enc}
${destination_entity_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_1: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;id_indigitall&quot;: &quot;fda8d529-b6c0-4046-8379-a1783e70beb9&quot;,&#xd;
	&quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenLogin" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">tokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname=" Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_1: lf-mdw-mandar-plata-listar-favoritos-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/iu4q679j</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xNTk=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenLisFav" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenLisFav</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_1: lf-mdw-validar-usuario-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q446t9wm</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;:&quot;NTE5OTIwNDU3NTI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMjc=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenLisFav}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenValUsuario" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenValUsuario</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_1: lf-mdw-inicio-flujo-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/uwzc65xt</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;:&quot;NTE5OTIwNDU3NTI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origin_msisdn&quot;: &quot;${msisdnUserEncode}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMjg=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenValUsuario}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenInicioFlujo" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenInicioFlujo</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp ext_session" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ext_session</stringProp>
                  <stringProp name="RegexExtractor.regex"> &quot;session&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_1: lf-mdw-consultar-info-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/6yajv8x5</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;: &quot;NTE5OTIwNDU3NTI=&quot;,&#xd;
    &quot;destination_entity&quot;: &quot;WUFQRQ==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origin_msisdn&quot;: &quot;${msisdnUserEncode}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMjk=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenInicioFlujo}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">session</stringProp>
                      <stringProp name="Header.value">${ext_session}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokeConsultarInfo" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokeConsultarInfo</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_1: lf-mdw-cotizacion-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/kle2gq5v</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;: &quot;NTE5OTIwNDU3NTI=&quot;,&#xd;
    &quot;amount&quot;: &quot;Mg==&quot;,&#xd;
    &quot;destination_entity&quot;: &quot;WUFQRQ==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origin_msisdn&quot;: &quot;${msisdnUserEncode}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMzA=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokeConsultarInfo}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">session</stringProp>
                      <stringProp name="Header.value">${ext_session}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokecotizacionP2p" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokecotizacionP2p</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_1: lf-mdw-mandar-plata-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/zqfqhep0</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;motivo&quot;: &quot;&quot;,&#xd;
    &quot;monto&quot;: &quot;Mg==&quot;,&#xd;
    &quot;entidad_destino&quot;: &quot;WUFQRQ==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdnUserEncode}&quot;,&#xd;
    &quot;destino&quot;: &quot;NTE5OTIwNDU3NTI=&quot;,&#xd;
    &quot;trx&quot;: &quot;TUFOREFSX1BMQVRB&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMw==</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokecotizacionP2p}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">session</stringProp>
                      <stringProp name="Header.value">${ext_session}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0056_2 - Manda plata desde Bim hacia cualquier otra Billetera (No Bim)" enabled="true">
            <stringProp name="TestPlan.comments">ESC002: Compartir resultado de un mandar plata a (YAPE / PLIN) por P2P con perfil Bimer</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">${dataCSV}\parte_23.csv</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames"></stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor Login" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${destination_msisdn},destination_msisdn_enc)}
${__base64Encode(${msisdn_user},msisdnUserEncode)}
${__base64Encode(${destination_entity},destination_entity_enc)}
${__base64Encode(${transaction_amount},transaction_amount_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${destination_msisdn_enc}
${msisdnUserEncode}
${destination_entity_enc}
${transaction_amount_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_2: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;id_indigitall&quot;: &quot;fda8d529-b6c0-4046-8379-a1783e70beb9&quot;,&#xd;
	&quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenLogin" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">tokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_2: lf-mdw-mandar-plata-listar-favoritos-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/iu4q679j</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xNTk=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenLisFav" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenLisFav</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_2: lf-mdw-validar-usuario-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/q446t9wm</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;:&quot;NTE5OTIwNDU3NTI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMjc=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenLisFav}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenValUsuario" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenValUsuario</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_2: lf-mdw-inicio-flujo-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/uwzc65xt</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;:&quot;NTE5OTIwNDU3NTI=&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origin_msisdn&quot;: &quot;${msisdnUserEncode}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMjg=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenValUsuario}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenInicioFlujo" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenInicioFlujo</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp ext_session" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ext_session</stringProp>
                  <stringProp name="RegexExtractor.regex"> &quot;session&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_2: lf-mdw-consultar-info-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/6yajv8x5</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;: &quot;NTE5OTIwNDU3NTI=&quot;,&#xd;
    &quot;destination_entity&quot;: &quot;WUFQRQ==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origin_msisdn&quot;: &quot;${msisdnUserEncode}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMjk=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenInicioFlujo}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">session</stringProp>
                      <stringProp name="Header.value">${ext_session}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokeConsultarInfo" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokeConsultarInfo</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_2: lf-mdw-cotizacion-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/kle2gq5v</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destination_msisdn&quot;: &quot;NTE5OTIwNDU3NTI=&quot;,&#xd;
    &quot;amount&quot;: &quot;Mg==&quot;,&#xd;
    &quot;destination_entity&quot;: &quot;WUFQRQ==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app}&quot;,&#xd;
    &quot;origin_msisdn&quot;: &quot;${msisdnUserEncode}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMzA=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokeConsultarInfo}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">session</stringProp>
                      <stringProp name="Header.value">${ext_session}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokecotizacionP2p" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokecotizacionP2p</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_2: lf-mdw-mandar-plata-p2p-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/zqfqhep0</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;motivo&quot;: &quot;&quot;,&#xd;
    &quot;monto&quot;: &quot;Mg==&quot;,&#xd;
    &quot;entidad_destino&quot;: &quot;WUFQRQ==&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;origen&quot;: &quot;${msisdnUserEncode}&quot;,&#xd;
    &quot;destino&quot;: &quot;NTE5OTIwNDU3NTI=&quot;,&#xd;
    &quot;trx&quot;: &quot;TUFOREFSX1BMQVRB&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xMw==</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokecotizacionP2p}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">session</stringProp>
                      <stringProp name="Header.value">${ext_session}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokemandaplataP2p" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokemandaplataP2p</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp id_tran Manda plata" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">id_tran</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;id_tran&quot;: &quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_2: lf-mdw-compartir-resultado-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/37k9g907</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;id_tran&quot;: &quot;${id_tran}&quot;,&#xd;
    &quot;msisdn_destino&quot;: &quot;${msisdnUserEncode}&quot;,&#xd;
    &quot;msisdn_origen&quot;: &quot;${msisdnUserEncode}&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokemandaplataP2p}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0056_3 - Manda plata desde Bim hacia cualquier otra Billetera (No Bim)" enabled="true">
            <stringProp name="TestPlan.comments">ESC003: Mandar plata a (YAPE / PLIN) por QR con perfil de usuario final o Bimer</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">${dataCSV}\parte_24.csv</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames"></stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor Login" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.IvParameterSpec
import org.apache.commons.codec.binary.Base64

// Obtener los valores de las variables de JMeter
def key = vars.get(&quot;key_encryption&quot;)  // Clave de encriptación
def iv = vars.get(&quot;iv_encryption&quot;)    // Vector de inicialización
def msisdn_user = vars.get(&quot;msisdn_user&quot;)  // Usuario (MSISDN)
def password = vars.get(&quot;password&quot;)       // Contraseña

// Concatenar las credenciales (usuario:contraseña)
def credentials = msisdn_user + &quot;:&quot; + password

// Función para encriptar con AES-256-CBC
def encryptAES256(plaintext, key, iv) {
    try {
        // Convertir la clave y IV de String a byte[]
        byte[] keyBytes = key.getBytes(&quot;UTF-8&quot;)
        byte[] ivBytes = iv.getBytes(&quot;UTF-8&quot;)

        // Crear objetos de clave y IV
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, &quot;AES&quot;)
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes)

        // Inicializar el cifrador AES en modo CBC
        Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;)
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec)

        // Cifrar el texto plano
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(&quot;UTF-8&quot;))

        // Codificar los bytes cifrados a Base64
        return Base64.encodeBase64String(encryptedBytes)
    } catch (Exception e) {
        e.printStackTrace()
        return null
    }
}

// Encriptar las credenciales
def encryptedText = encryptAES256(credentials, key, iv)

// Si la encriptación es exitosa, codificar el resultado en Base64 (para el encabezado Basic Auth)
if (encryptedText != null) {
    def basicAuth = &quot;Basic &quot; + new String(Base64.encodeBase64(encryptedText.getBytes(&quot;UTF-8&quot;)))
    // Guardar el resultado en una variable de JMeter
    vars.put(&quot;auth_encrypt_login&quot;, basicAuth)
    log.info(&quot;Basic Auth: &quot; + basicAuth)
} else {
    log.error(&quot;Error al encriptar las credenciales.&quot;)
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="VariablesEncode" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">${__base64Encode(${destination_msisdn},destination_msisdn_enc)}
${__base64Encode(${msisdn_user},msisdnUserEncode)}
${__base64Encode(${transaction_amount},transaction_amount_enc)}
${__base64Encode(${destination_entity},destination_entity_enc)}</stringProp>
              <stringProp name="RESPONSE_DATA">${destination_msisdn_enc}
${msisdnUserEncode}
${transaction_amount_enc}
${destination_entity_enc}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_3: lf-mdw-login-app-bim" enabled="true">
              <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/dy25bk1f</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;id_indigitall&quot;: &quot;fda8d529-b6c0-4046-8379-a1783e70beb9&quot;,&#xd;
	&quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenLogin" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">tokenLogin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_3: lf-mdw-generateqr-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/obpc37jx</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;storelabel&quot;: &quot;&quot;,&#xd;
	&quot;traza_app&quot;: &quot;${traza_destination_generic}&quot;,&#xd;
	&quot;fechavencimiento&quot;: &quot;&quot;,&#xd;
	&quot;uri&quot;: &quot;&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenLogin}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenQR" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenQR</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp qr_bim_destino" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">qr_bim_destino</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;text&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_3: lf-mdw-inicio-pago-qr-otp-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/5t9hogps</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;qr&quot;: &quot;MDAwMjAxMDEwMjExMzkzMjgwYjBhYWU5Mjg0MDVjM2NhZGJjM2QwNmY5YmM4OWM1NTIwNDU2MTE1MzAzNjA0NTgwMlBFNTkwNllBUEVSTzYwMDRMaW1hNjMwNDc3Mzk=&quot;,&#xd;
    &quot;transaccion&quot;: &quot;Q09NUFJB&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF8xNTk=</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenQR}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenInicioPagoQR" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenInicioPagoQR</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp  idinicioPagoQR" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">idinicioPagoQR</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;id_pdp&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp  Alias" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">alias</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;alias&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp  Sesion" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Session</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;session&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_3: lf-mdw-cotizacion-pago-qr-estatico-opt-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/ocfsmk4k</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id_pdp&quot;: &quot;${idinicioPagoQR}&quot;,&#xd;
    &quot;monto&quot;: &quot;Mg==&quot;,&#xd;
    &quot;alias&quot;: &quot;${alias}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;referencia&quot;: &quot;&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${msisdn_user}</stringProp>
                      <stringProp name="Authorization.password">${password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF81Mw==</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenInicioPagoQR}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">session</stringProp>
                      <stringProp name="Header.value">${Session}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp tokenCotizacionEstatica" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">tokenCotizacionEstatica</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0056_3: lf-mdw-pago-qr-dinamico-otp-app-bim" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL_OPERACIONES}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${PATH_OPERACIONES}/d21aq169</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id_pdp&quot;: &quot;${idinicioPagoQR}&quot;,&#xd;
    &quot;alias&quot;: &quot;${alias}&quot;,&#xd;
    &quot;traza_app&quot;: &quot;${traza_app_generic}&quot;,&#xd;
    &quot;referencia&quot;: &quot;&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${x-api-key-operaciones}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">pantalla</stringProp>
                      <stringProp name="Header.value">TXNObVB0VF81NA==</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${tokenCotizacionEstatica}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">${auth_encrypt_login}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">msisdn</stringProp>
                      <stringProp name="Header.value">${msisdnUserEncode}</stringProp>
                    </elementProp>
                    <elementProp name="session" elementType="Header">
                      <stringProp name="Header.name">session</stringProp>
                      <stringProp name="Header.value">${Session}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0057_1 - Recibir plata desde cualquier Billetera hacia Bim" enabled="true">
            <stringProp name="TestPlan.comments">ESC001: Recibir plata por interoperabilidad (Yape o Plin) hacia mi billetera BIM.</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_25.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">// Obtener la fecha y hora actuales
def now = new Date()

// Crear un timestamp personalizado en formato &apos;yyyyMMddHHmmss&apos;
def customString = now.format(&apos;yyyyMMddHHmmss&apos;)

// Crear la cadena personalizada final (agregando &quot;PDP&quot; al principio)
def timeStamp = &quot;PDP&quot; + customString

// Almacenar la variable en JMeter
vars.put(&quot;time_stamp_external&quot;, timeStamp)

// Imprimir el valor de la variable en los logs para verificación
log.info(&quot;time_stamp_external: &quot; + vars.get(&quot;time_stamp_external&quot;))</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0057_1: lf-mdw-auth-token-external" enabled="true">
              <stringProp name="HTTPSampler.domain">niubimtest.mibim.pe</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/v1/login</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;AuthLogin&quot;: {&#xd;
        &quot;clientId&quot;: &quot;267a651cf985861bef49f5cc534f4014&quot;,&#xd;
        &quot;clientSecret&quot;: &quot;ec75ee00cf7d6c4a659cca70badab60c9938acf5aee1c18cf4c6c6e845d6fe88&quot;,&#xd;
        &quot;username&quot;: &quot;BCPPWVIRTUALNIUBIZ&quot;,&#xd;
        &quot;password&quot;: &quot;Pdp123456!&quot;&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">uOZhpv0bJm8LpAvN8Jc0H5qX4Eqo8lea1HV9FxJI</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp access_token_niubiz" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">access_token_niubiz</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;accessToken&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0057_1: lf-mdw-transfer-niubiz-external" enabled="true">
                <stringProp name="HTTPSampler.domain">${url_token_login_niubiz}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${Path_login_niubiz}/transfer</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;transfer&quot;: {&#xd;
        &quot;transactionAmount&quot;: &quot;10&quot;,&#xd;
        &quot;currencyIsoCode&quot;: &quot;PEN&quot;, &#xd;
        &quot;phoneNumber&quot;: &quot;0000051986144076&quot;,&#xd;
        &quot;externalTransacionIdentifier&quot;: &quot;${time_stamp_external}&quot;,&#xd;
        &quot;transactionIdentifier&quot;: &quot;${time_stamp_external}23bca33d38c449c09f0e5266f&quot;,&#xd;
        &quot;originWallet&quot;: &quot;YAPE&quot;,&#xd;
        &quot;originFirstName&quot;: &quot;MARCOS&quot;,&#xd;
        &quot;originLastName&quot;: &quot;FUNG&quot;,&#xd;
        &quot;transactionDateTime&quot;: &quot;2024-07-31 03:54:13&quot;,&#xd;
        &quot;transactionPlatform&quot;: {&#xd;
            &quot;entityCode&quot;: &quot;00&quot;,&#xd;
            &quot;entityDesc&quot;: &quot;Niubiz&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${virtual_interop_user}</stringProp>
                      <stringProp name="Authorization.password">${virtual_interop_password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${api-key-external-niubiz}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">AuthToken</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token_niubiz}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="F0057_3 - Recibir plata desde cualquier Billetera hacia Bim" enabled="true">
            <stringProp name="TestPlan.comments">ESC003: Realizar una reversa de una transferencia enviado por interoperabilidad (Yape o Plin).</stringProp>
          </GenericController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">${dataCSV}\parte_26.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">// Obtener la fecha y hora actuales
def now = new Date()

// Crear un timestamp personalizado en formato &apos;yyyyMMddHHmmss&apos;
def customString = now.format(&apos;yyyyMMddHHmmss&apos;)

// Crear la cadena personalizada final (agregando &quot;PDP&quot; al principio)
def timeStamp = &quot;PDP&quot; + customString

// Almacenar la variable en JMeter
vars.put(&quot;time_stamp_external&quot;, timeStamp)

// Imprimir el valor de la variable en los logs para verificación
log.info(&quot;time_stamp_external: &quot; + vars.get(&quot;time_stamp_external&quot;))</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0057_3: lf-mdw-auth-token-external" enabled="true">
              <stringProp name="HTTPSampler.domain">${url_token_login_niubiz}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${Path_login_niubiz}/login</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;AuthLogin&quot;: {&#xd;
        &quot;clientId&quot;: &quot;${clientId}&quot;,&#xd;
        &quot;clientSecret&quot;: &quot;${clientSecret}&quot;,&#xd;
        &quot;username&quot;: &quot;${username}&quot;,&#xd;
        &quot;password&quot;: &quot;${password_niubiz}&quot;&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-api-key</stringProp>
                    <stringProp name="Header.value">${api-key-external-niubiz}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp access_token_niubiz" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">access_token_niubiz</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;accessToken&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">failed</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0057_3: lf-mdw-transfer-niubiz-external" enabled="true">
                <stringProp name="HTTPSampler.domain">${url_token_login_niubiz}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${Path_login_niubiz}/transfer</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;transfer&quot;: {&#xd;
        &quot;transactionAmount&quot;: &quot;${monto}&quot;,&#xd;
        &quot;currencyIsoCode&quot;: &quot;PEN&quot;, &#xd;
        &quot;phoneNumber&quot;: &quot;${celular}&quot;,&#xd;
        &quot;externalTransacionIdentifier&quot;: &quot;${time_stamp_external}&quot;,&#xd;
        &quot;transactionIdentifier&quot;: &quot;${time_stamp_external}23bca33d38c449c09f0e5266f&quot;,&#xd;
        &quot;originWallet&quot;: &quot;${originWallet}&quot;,&#xd;
        &quot;originFirstName&quot;: &quot;NOMBRE&quot;,&#xd;
        &quot;originLastName&quot;: &quot;APELLIDO&quot;,&#xd;
        &quot;transactionDateTime&quot;: &quot;${transactionDateTime}&quot;,&#xd;
        &quot;transactionPlatform&quot;: {&#xd;
            &quot;entityCode&quot;: &quot;00&quot;,&#xd;
            &quot;entityDesc&quot;: &quot;Niubiz&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${virtual_interop_user}</stringProp>
                      <stringProp name="Authorization.password">${virtual_interop_password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${api-key-external-niubiz}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">AuthToken</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token_niubiz}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegExp externalTransacionIdentifier" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">externalTransacionIdentifier</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;transactionIdentifier&quot;: &quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">failed</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseCode() == &quot;200&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="F0057_3: lf-mdw-reversal-niubiz-external" enabled="true">
                <stringProp name="HTTPSampler.domain">${url_token_login_niubiz}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${Path_login_niubiz}/reversal</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;reversal&quot;: {&#xd;
        &quot;transactionAmount&quot;: &quot;${monto}&quot;,&#xd;
        &quot;currencyIsoCode&quot;: &quot;PEN&quot;,&#xd;
        &quot;phoneNumber&quot;: &quot;${celular}&quot;,&#xd;
        &quot;externalTransacionIdentifier&quot;: &quot;${externalTransacionIdentifier}&quot;,&#xd;
        &quot;transactionDateTime&quot;: &quot;${transactionDateTime}&quot;,&#xd;
        &quot;originWallet&quot;: &quot;${originWallet}&quot;,&#xd;
        &quot;transactionPlatform&quot;: {&#xd;
            &quot;entityCode&quot;: &quot;00&quot;,&#xd;
            &quot;entityDesc&quot;: &quot;Niubiz&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="Authorization" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${virtual_interop_user}</stringProp>
                      <stringProp name="Authorization.password">${virtual_interop_password}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-api-key</stringProp>
                      <stringProp name="Header.value">${api-key-external-niubiz}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">AuthToken</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token_niubiz}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename">${ReportResult}\resultado_GRUPO1.csv</stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>true</subresults>
                <responseData>true</responseData>
                <samplerData>true</samplerData>
                <xml>true</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>true</responseHeaders>
                <requestHeaders>true</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename">${ReportResult}\RequestResponse_GRUPO1.xml</stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename">${ReportResult}\reporte_GRUPO1.csv</stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">${ReportResult}\REPORTE_GENERAL.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">${ReportResult}\REQUESTRESPONSE.xml</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="testName" elementType="Argument">
                <stringProp name="Argument.name">testName</stringProp>
                <stringProp name="Argument.value">BIM</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="nodeName" elementType="Argument">
                <stringProp name="Argument.name">nodeName</stringProp>
                <stringProp name="Argument.value">Jmeter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="runId" elementType="Argument">
                <stringProp name="Argument.name">runId</stringProp>
                <stringProp name="Argument.value">DryRun</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBURL" elementType="Argument">
                <stringProp name="Argument.name">influxDBURL</stringProp>
                <stringProp name="Argument.value">https://us-east-1-1.aws.cloud2.influxdata.com/</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBToken" elementType="Argument">
                <stringProp name="Argument.name">influxDBToken</stringProp>
                <stringProp name="Argument.value">ia1Re8w3kKknIUc9AcH2Vm1osN-SD2BlTGhiGxWlgrdoqr8_gUoFR4-x7k8uxraKIoFMdj1hHK1nZvFDFoOAPA==</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBOrganization" elementType="Argument">
                <stringProp name="Argument.name">influxDBOrganization</stringProp>
                <stringProp name="Argument.value">BIM</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBBucket" elementType="Argument">
                <stringProp name="Argument.name">influxDBBucket</stringProp>
                <stringProp name="Argument.value">BIMLOADTEST</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBFlushInterval" elementType="Argument">
                <stringProp name="Argument.name">influxDBFlushInterval</stringProp>
                <stringProp name="Argument.value">4000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBMaxBatchSize" elementType="Argument">
                <stringProp name="Argument.name">influxDBMaxBatchSize</stringProp>
                <stringProp name="Argument.value">2000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBThresholdError" elementType="Argument">
                <stringProp name="Argument.name">influxDBThresholdError</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="samplersList" elementType="Argument">
                <stringProp name="Argument.name">samplersList</stringProp>
                <stringProp name="Argument.value">.*</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="useRegexForSamplerList" elementType="Argument">
                <stringProp name="Argument.name">useRegexForSamplerList</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="recordSubSamples" elementType="Argument">
                <stringProp name="Argument.name">recordSubSamples</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="saveResponseBodyOfFailures" elementType="Argument">
                <stringProp name="Argument.name">saveResponseBodyOfFailures</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="responseBodyLength" elementType="Argument">
                <stringProp name="Argument.name">responseBodyLength</stringProp>
                <stringProp name="Argument.value">2000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">io.github.mderevyankoaqa.influxdb2.visualizer.InfluxDatabaseBackendListenerClient</stringProp>
        </BackendListener>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
